// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_type.proto

#include "sql_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace duckdb_webapi {
namespace proto {
class SQLTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SQLType> _instance;
} _SQLType_default_instance_;
}  // namespace proto
}  // namespace duckdb_webapi
static void InitDefaultsscc_info_SQLType_sql_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_webapi::proto::_SQLType_default_instance_;
    new (ptr) ::duckdb_webapi::proto::SQLType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SQLType_sql_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SQLType_sql_5ftype_2eproto}, {}};

namespace duckdb_webapi {
namespace proto {
bool SQLTypeID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SQLTypeID_strings[21] = {};

static const char SQLTypeID_names[] =
  "SQL_ANY"
  "SQL_BIGINT"
  "SQL_BLOB"
  "SQL_BOOLEAN"
  "SQL_CHAR"
  "SQL_DATE"
  "SQL_DECIMAL"
  "SQL_DOUBLE"
  "SQL_FLOAT"
  "SQL_INTEGER"
  "SQL_INVALID"
  "SQL_LIST"
  "SQL_NULL"
  "SQL_SMALLINT"
  "SQL_STRUCT"
  "SQL_TIME"
  "SQL_TIMESTAMP"
  "SQL_TINYINT"
  "SQL_UNKNOWN"
  "SQL_VARBINARY"
  "SQL_VARCHAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SQLTypeID_entries[] = {
  { {SQLTypeID_names + 0, 7}, 3 },
  { {SQLTypeID_names + 7, 10}, 14 },
  { {SQLTypeID_names + 17, 8}, 24 },
  { {SQLTypeID_names + 25, 11}, 10 },
  { {SQLTypeID_names + 36, 8}, 21 },
  { {SQLTypeID_names + 44, 8}, 15 },
  { {SQLTypeID_names + 52, 11}, 20 },
  { {SQLTypeID_names + 63, 10}, 19 },
  { {SQLTypeID_names + 73, 9}, 18 },
  { {SQLTypeID_names + 82, 11}, 13 },
  { {SQLTypeID_names + 93, 11}, 0 },
  { {SQLTypeID_names + 104, 8}, 101 },
  { {SQLTypeID_names + 112, 8}, 1 },
  { {SQLTypeID_names + 120, 12}, 12 },
  { {SQLTypeID_names + 132, 10}, 100 },
  { {SQLTypeID_names + 142, 8}, 16 },
  { {SQLTypeID_names + 150, 13}, 17 },
  { {SQLTypeID_names + 163, 11}, 11 },
  { {SQLTypeID_names + 174, 11}, 2 },
  { {SQLTypeID_names + 185, 13}, 23 },
  { {SQLTypeID_names + 198, 11}, 22 },
};

static const int SQLTypeID_entries_by_number[] = {
  10, // 0 -> SQL_INVALID
  12, // 1 -> SQL_NULL
  18, // 2 -> SQL_UNKNOWN
  0, // 3 -> SQL_ANY
  3, // 10 -> SQL_BOOLEAN
  17, // 11 -> SQL_TINYINT
  13, // 12 -> SQL_SMALLINT
  9, // 13 -> SQL_INTEGER
  1, // 14 -> SQL_BIGINT
  5, // 15 -> SQL_DATE
  15, // 16 -> SQL_TIME
  16, // 17 -> SQL_TIMESTAMP
  8, // 18 -> SQL_FLOAT
  7, // 19 -> SQL_DOUBLE
  6, // 20 -> SQL_DECIMAL
  4, // 21 -> SQL_CHAR
  20, // 22 -> SQL_VARCHAR
  19, // 23 -> SQL_VARBINARY
  2, // 24 -> SQL_BLOB
  14, // 100 -> SQL_STRUCT
  11, // 101 -> SQL_LIST
};

const std::string& SQLTypeID_Name(
    SQLTypeID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SQLTypeID_entries,
          SQLTypeID_entries_by_number,
          21, SQLTypeID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SQLTypeID_entries,
      SQLTypeID_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SQLTypeID_strings[idx].get();
}
bool SQLTypeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SQLTypeID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SQLTypeID_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<SQLTypeID>(int_value);
  }
  return success;
}

// ===================================================================

class SQLType::_Internal {
 public:
};

SQLType::SQLType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_webapi.proto.SQLType)
}
SQLType::SQLType(const SQLType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  collation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collation().empty()) {
    collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collation(),
      GetArena());
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:duckdb_webapi.proto.SQLType)
}

void SQLType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SQLType_sql_5ftype_2eproto.base);
  collation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
}

SQLType::~SQLType() {
  // @@protoc_insertion_point(destructor:duckdb_webapi.proto.SQLType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SQLType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SQLType::ArenaDtor(void* object) {
  SQLType* _this = reinterpret_cast< SQLType* >(object);
  (void)_this;
}
void SQLType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SQLType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SQLType& SQLType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SQLType_sql_5ftype_2eproto.base);
  return *internal_default_instance();
}


void SQLType::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_webapi.proto.SQLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
  _internal_metadata_.Clear<std::string>();
}

const char* SQLType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .duckdb_webapi.proto.SQLTypeID type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_id(static_cast<::duckdb_webapi::proto::SQLTypeID>(val));
        } else goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SQLType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_webapi.proto.SQLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .duckdb_webapi.proto.SQLTypeID type_id = 1;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_id(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 scale = 3;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scale(), target);
  }

  // string collation = 4;
  if (this->collation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collation().data(), static_cast<int>(this->_internal_collation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_webapi.proto.SQLType.collation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_webapi.proto.SQLType)
  return target;
}

size_t SQLType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_webapi.proto.SQLType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collation = 4;
  if (this->collation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collation());
  }

  // .duckdb_webapi.proto.SQLTypeID type_id = 1;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_id());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SQLType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SQLType*>(
      &from));
}

void SQLType::MergeFrom(const SQLType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_webapi.proto.SQLType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collation().size() > 0) {
    _internal_set_collation(from._internal_collation());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void SQLType::CopyFrom(const SQLType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_webapi.proto.SQLType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SQLType::IsInitialized() const {
  return true;
}

void SQLType::InternalSwap(SQLType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  collation_.Swap(&other->collation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SQLType, scale_)
      + sizeof(SQLType::scale_)
      - PROTOBUF_FIELD_OFFSET(SQLType, type_id_)>(
          reinterpret_cast<char*>(&type_id_),
          reinterpret_cast<char*>(&other->type_id_));
}

std::string SQLType::GetTypeName() const {
  return "duckdb_webapi.proto.SQLType";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace duckdb_webapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::duckdb_webapi::proto::SQLType* Arena::CreateMaybeMessage< ::duckdb_webapi::proto::SQLType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_webapi::proto::SQLType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
