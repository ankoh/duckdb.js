// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_result.proto

#include "query_result.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_query_5fresult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResultColumn_query_5fresult_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sql_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SQLType_sql_5ftype_2eproto;
namespace duckdb_webapi {
namespace proto {
class QueryResultColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResultColumn> _instance;
} _QueryResultColumn_default_instance_;
class QueryResultChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResultChunk> _instance;
} _QueryResultChunk_default_instance_;
class QueryResultHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResultHeader> _instance;
} _QueryResultHeader_default_instance_;
}  // namespace proto
}  // namespace duckdb_webapi
static void InitDefaultsscc_info_QueryResultChunk_query_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_webapi::proto::_QueryResultChunk_default_instance_;
    new (ptr) ::duckdb_webapi::proto::QueryResultChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResultChunk_query_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResultChunk_query_5fresult_2eproto}, {
      &scc_info_QueryResultColumn_query_5fresult_2eproto.base,}};

static void InitDefaultsscc_info_QueryResultColumn_query_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_webapi::proto::_QueryResultColumn_default_instance_;
    new (ptr) ::duckdb_webapi::proto::QueryResultColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResultColumn_query_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResultColumn_query_5fresult_2eproto}, {}};

static void InitDefaultsscc_info_QueryResultHeader_query_5fresult_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_webapi::proto::_QueryResultHeader_default_instance_;
    new (ptr) ::duckdb_webapi::proto::QueryResultHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResultHeader_query_5fresult_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResultHeader_query_5fresult_2eproto}, {
      &scc_info_SQLType_sql_5ftype_2eproto.base,}};

namespace duckdb_webapi {
namespace proto {

// ===================================================================

class QueryResultColumn::_Internal {
 public:
};

QueryResultColumn::QueryResultColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  null_mask_(arena),
  rows_bool_(arena),
  rows_i32_(arena),
  rows_u32_(arena),
  rows_i64_(arena),
  rows_u64_(arena),
  rows_f32_(arena),
  rows_f64_(arena),
  rows_str_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_webapi.proto.QueryResultColumn)
}
QueryResultColumn::QueryResultColumn(const QueryResultColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      null_mask_(from.null_mask_),
      rows_bool_(from.rows_bool_),
      rows_i32_(from.rows_i32_),
      rows_u32_(from.rows_u32_),
      rows_i64_(from.rows_i64_),
      rows_u64_(from.rows_u64_),
      rows_f32_(from.rows_f32_),
      rows_f64_(from.rows_f64_),
      rows_str_(from.rows_str_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:duckdb_webapi.proto.QueryResultColumn)
}

void QueryResultColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResultColumn_query_5fresult_2eproto.base);
}

QueryResultColumn::~QueryResultColumn() {
  // @@protoc_insertion_point(destructor:duckdb_webapi.proto.QueryResultColumn)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResultColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResultColumn::ArenaDtor(void* object) {
  QueryResultColumn* _this = reinterpret_cast< QueryResultColumn* >(object);
  (void)_this;
}
void QueryResultColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResultColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResultColumn& QueryResultColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResultColumn_query_5fresult_2eproto.base);
  return *internal_default_instance();
}


void QueryResultColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_webapi.proto.QueryResultColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  null_mask_.Clear();
  rows_bool_.Clear();
  rows_i32_.Clear();
  rows_u32_.Clear();
  rows_i64_.Clear();
  rows_u64_.Clear();
  rows_f32_.Clear();
  rows_f64_.Clear();
  rows_str_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResultColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool null_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_null_mask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_null_mask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool rows_bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_rows_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_rows_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rows_i32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rows_i32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_rows_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rows_u32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rows_u32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_rows_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 rows_i64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rows_i64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_rows_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 rows_u64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_rows_u64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_rows_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rows_f32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rows_f32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_rows_f32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double rows_f64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rows_f64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_rows_f64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string rows_str = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rows_str();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResultColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_webapi.proto.QueryResultColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool null_mask = 1;
  if (this->_internal_null_mask_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_null_mask(), target);
  }

  // repeated bool rows_bool = 2;
  if (this->_internal_rows_bool_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_rows_bool(), target);
  }

  // repeated int32 rows_i32 = 3;
  {
    int byte_size = _rows_i32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rows_i32(), byte_size, target);
    }
  }

  // repeated uint32 rows_u32 = 4;
  {
    int byte_size = _rows_u32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_rows_u32(), byte_size, target);
    }
  }

  // repeated int64 rows_i64 = 5;
  {
    int byte_size = _rows_i64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_rows_i64(), byte_size, target);
    }
  }

  // repeated uint64 rows_u64 = 6;
  {
    int byte_size = _rows_u64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_rows_u64(), byte_size, target);
    }
  }

  // repeated float rows_f32 = 7;
  if (this->_internal_rows_f32_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_rows_f32(), target);
  }

  // repeated double rows_f64 = 8;
  if (this->_internal_rows_f64_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_rows_f64(), target);
  }

  // repeated string rows_str = 9;
  for (int i = 0, n = this->_internal_rows_str_size(); i < n; i++) {
    const auto& s = this->_internal_rows_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_webapi.proto.QueryResultColumn.rows_str");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_webapi.proto.QueryResultColumn)
  return target;
}

size_t QueryResultColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_webapi.proto.QueryResultColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool null_mask = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_null_mask_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _null_mask_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool rows_bool = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_bool_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rows_i32 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rows_i32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_i32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rows_u32 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rows_u32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_u32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rows_i64 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->rows_i64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_i64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 rows_u64 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->rows_u64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_u64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rows_f32 = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_f32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_f32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double rows_f64 = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_f64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_f64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string rows_str = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rows_str_.size());
  for (int i = 0, n = rows_str_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rows_str_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResultColumn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResultColumn*>(
      &from));
}

void QueryResultColumn::MergeFrom(const QueryResultColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_webapi.proto.QueryResultColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  null_mask_.MergeFrom(from.null_mask_);
  rows_bool_.MergeFrom(from.rows_bool_);
  rows_i32_.MergeFrom(from.rows_i32_);
  rows_u32_.MergeFrom(from.rows_u32_);
  rows_i64_.MergeFrom(from.rows_i64_);
  rows_u64_.MergeFrom(from.rows_u64_);
  rows_f32_.MergeFrom(from.rows_f32_);
  rows_f64_.MergeFrom(from.rows_f64_);
  rows_str_.MergeFrom(from.rows_str_);
}

void QueryResultColumn::CopyFrom(const QueryResultColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_webapi.proto.QueryResultColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResultColumn::IsInitialized() const {
  return true;
}

void QueryResultColumn::InternalSwap(QueryResultColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  null_mask_.InternalSwap(&other->null_mask_);
  rows_bool_.InternalSwap(&other->rows_bool_);
  rows_i32_.InternalSwap(&other->rows_i32_);
  rows_u32_.InternalSwap(&other->rows_u32_);
  rows_i64_.InternalSwap(&other->rows_i64_);
  rows_u64_.InternalSwap(&other->rows_u64_);
  rows_f32_.InternalSwap(&other->rows_f32_);
  rows_f64_.InternalSwap(&other->rows_f64_);
  rows_str_.InternalSwap(&other->rows_str_);
}

std::string QueryResultColumn::GetTypeName() const {
  return "duckdb_webapi.proto.QueryResultColumn";
}


// ===================================================================

class QueryResultChunk::_Internal {
 public:
};

QueryResultChunk::QueryResultChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_webapi.proto.QueryResultChunk)
}
QueryResultChunk::QueryResultChunk(const QueryResultChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&row_offset_, &from.row_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:duckdb_webapi.proto.QueryResultChunk)
}

void QueryResultChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResultChunk_query_5fresult_2eproto.base);
  ::memset(&row_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
}

QueryResultChunk::~QueryResultChunk() {
  // @@protoc_insertion_point(destructor:duckdb_webapi.proto.QueryResultChunk)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResultChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResultChunk::ArenaDtor(void* object) {
  QueryResultChunk* _this = reinterpret_cast< QueryResultChunk* >(object);
  (void)_this;
}
void QueryResultChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResultChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResultChunk& QueryResultChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResultChunk_query_5fresult_2eproto.base);
  return *internal_default_instance();
}


void QueryResultChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_webapi.proto.QueryResultChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  ::memset(&row_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResultChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 row_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_webapi.proto.QueryResultColumn columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResultChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_webapi.proto.QueryResultChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row_offset = 1;
  if (this->row_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_offset(), target);
  }

  // uint32 row_count = 2;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row_count(), target);
  }

  // repeated .duckdb_webapi.proto.QueryResultColumn columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_webapi.proto.QueryResultChunk)
  return target;
}

size_t QueryResultChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_webapi.proto.QueryResultChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .duckdb_webapi.proto.QueryResultColumn columns = 3;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 row_offset = 1;
  if (this->row_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_offset());
  }

  // uint32 row_count = 2;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResultChunk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResultChunk*>(
      &from));
}

void QueryResultChunk::MergeFrom(const QueryResultChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_webapi.proto.QueryResultChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.row_offset() != 0) {
    _internal_set_row_offset(from._internal_row_offset());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
}

void QueryResultChunk::CopyFrom(const QueryResultChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_webapi.proto.QueryResultChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResultChunk::IsInitialized() const {
  return true;
}

void QueryResultChunk::InternalSwap(QueryResultChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResultChunk, row_count_)
      + sizeof(QueryResultChunk::row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryResultChunk, row_offset_)>(
          reinterpret_cast<char*>(&row_offset_),
          reinterpret_cast<char*>(&other->row_offset_));
}

std::string QueryResultChunk::GetTypeName() const {
  return "duckdb_webapi.proto.QueryResultChunk";
}


// ===================================================================

class QueryResultHeader::_Internal {
 public:
};

void QueryResultHeader::clear_column_sql_types() {
  column_sql_types_.Clear();
}
QueryResultHeader::QueryResultHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  column_names_(arena),
  column_sql_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_webapi.proto.QueryResultHeader)
}
QueryResultHeader::QueryResultHeader(const QueryResultHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      column_names_(from.column_names_),
      column_sql_types_(from.column_sql_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:duckdb_webapi.proto.QueryResultHeader)
}

void QueryResultHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResultHeader_query_5fresult_2eproto.base);
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(row_count_));
}

QueryResultHeader::~QueryResultHeader() {
  // @@protoc_insertion_point(destructor:duckdb_webapi.proto.QueryResultHeader)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResultHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResultHeader::ArenaDtor(void* object) {
  QueryResultHeader* _this = reinterpret_cast< QueryResultHeader* >(object);
  (void)_this;
}
void QueryResultHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResultHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResultHeader& QueryResultHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResultHeader_query_5fresult_2eproto.base);
  return *internal_default_instance();
}


void QueryResultHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_webapi.proto.QueryResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  column_sql_types_.Clear();
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(row_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResultHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_webapi.proto.SQLType column_sql_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_sql_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResultHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_webapi.proto.QueryResultHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_query_id(), target);
  }

  // uint32 column_count = 3;
  if (this->column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_count(), target);
  }

  // uint32 row_count = 4;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_count(), target);
  }

  // repeated string column_names = 5;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_webapi.proto.QueryResultHeader.column_names");
    target = stream->WriteString(5, s, target);
  }

  // repeated .duckdb_webapi.proto.SQLType column_sql_types = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_sql_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_column_sql_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_webapi.proto.QueryResultHeader)
  return target;
}

size_t QueryResultHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_webapi.proto.QueryResultHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // repeated .duckdb_webapi.proto.SQLType column_sql_types = 7;
  total_size += 1UL * this->_internal_column_sql_types_size();
  for (const auto& msg : this->column_sql_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_query_id());
  }

  // uint32 column_count = 3;
  if (this->column_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_count());
  }

  // uint32 row_count = 4;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResultHeader::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResultHeader*>(
      &from));
}

void QueryResultHeader::MergeFrom(const QueryResultHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_webapi.proto.QueryResultHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  column_sql_types_.MergeFrom(from.column_sql_types_);
  if (from.query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from.column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
}

void QueryResultHeader::CopyFrom(const QueryResultHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_webapi.proto.QueryResultHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResultHeader::IsInitialized() const {
  return true;
}

void QueryResultHeader::InternalSwap(QueryResultHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  column_sql_types_.InternalSwap(&other->column_sql_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResultHeader, row_count_)
      + sizeof(QueryResultHeader::row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryResultHeader, query_id_)>(
          reinterpret_cast<char*>(&query_id_),
          reinterpret_cast<char*>(&other->query_id_));
}

std::string QueryResultHeader::GetTypeName() const {
  return "duckdb_webapi.proto.QueryResultHeader";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace duckdb_webapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::duckdb_webapi::proto::QueryResultColumn* Arena::CreateMaybeMessage< ::duckdb_webapi::proto::QueryResultColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_webapi::proto::QueryResultColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_webapi::proto::QueryResultChunk* Arena::CreateMaybeMessage< ::duckdb_webapi::proto::QueryResultChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_webapi::proto::QueryResultChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_webapi::proto::QueryResultHeader* Arena::CreateMaybeMessage< ::duckdb_webapi::proto::QueryResultHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_webapi::proto::QueryResultHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
