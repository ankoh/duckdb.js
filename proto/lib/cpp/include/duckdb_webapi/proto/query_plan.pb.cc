// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_plan.proto

#include "query_plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace duckdb_webapi {
namespace proto {
class QueryPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPlan> _instance;
} _QueryPlan_default_instance_;
}  // namespace proto
}  // namespace duckdb_webapi
static void InitDefaultsscc_info_QueryPlan_query_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_webapi::proto::_QueryPlan_default_instance_;
    new (ptr) ::duckdb_webapi::proto::QueryPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPlan_query_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryPlan_query_5fplan_2eproto}, {}};

namespace duckdb_webapi {
namespace proto {
bool LogicalOperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LogicalOperatorType_strings[45] = {};

static const char LogicalOperatorType_names[] =
  "OP_AGGREGATE_AND_GROUP_BY"
  "OP_ALTER"
  "OP_ANY_JOIN"
  "OP_CHUNK_GET"
  "OP_COMPARISON_JOIN"
  "OP_COPY_FROM_FILE"
  "OP_COPY_TO_FILE"
  "OP_CREATE_INDEX"
  "OP_CREATE_SCHEMA"
  "OP_CREATE_SEQUENCE"
  "OP_CREATE_TABLE"
  "OP_CREATE_VIEW"
  "OP_CROSS_PRODUCT"
  "OP_CTE_REF"
  "OP_DELETE"
  "OP_DELIM_GET"
  "OP_DELIM_JOIN"
  "OP_DISTINCT"
  "OP_DROP"
  "OP_EMPTY_RESULT"
  "OP_EXCEPT"
  "OP_EXECUTE"
  "OP_EXPLAIN"
  "OP_EXPRESSION_GET"
  "OP_FILTER"
  "OP_GET"
  "OP_INDEX_SCAN"
  "OP_INSERT"
  "OP_INTERSECT"
  "OP_INVALID"
  "OP_JOIN"
  "OP_LIMIT"
  "OP_ORDER_BY"
  "OP_PRAGMA"
  "OP_PREPARE"
  "OP_PROJECTION"
  "OP_RECURSIVE_CTE"
  "OP_TABLE_FUNCTION"
  "OP_TOP_N"
  "OP_TRANSACTION"
  "OP_UNION"
  "OP_UNNEST"
  "OP_UPDATE"
  "OP_VACUUM"
  "OP_WINDOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LogicalOperatorType_entries[] = {
  { {LogicalOperatorType_names + 0, 25}, 3 },
  { {LogicalOperatorType_names + 25, 8}, 32 },
  { {LogicalOperatorType_names + 33, 11}, 23 },
  { {LogicalOperatorType_names + 44, 12}, 14 },
  { {LogicalOperatorType_names + 56, 18}, 22 },
  { {LogicalOperatorType_names + 74, 17}, 9 },
  { {LogicalOperatorType_names + 91, 15}, 10 },
  { {LogicalOperatorType_names + 106, 15}, 34 },
  { {LogicalOperatorType_names + 121, 16}, 37 },
  { {LogicalOperatorType_names + 137, 18}, 35 },
  { {LogicalOperatorType_names + 155, 15}, 33 },
  { {LogicalOperatorType_names + 170, 14}, 36 },
  { {LogicalOperatorType_names + 184, 16}, 24 },
  { {LogicalOperatorType_names + 200, 10}, 19 },
  { {LogicalOperatorType_names + 210, 9}, 30 },
  { {LogicalOperatorType_names + 219, 12}, 15 },
  { {LogicalOperatorType_names + 231, 13}, 21 },
  { {LogicalOperatorType_names + 244, 11}, 11 },
  { {LogicalOperatorType_names + 255, 7}, 38 },
  { {LogicalOperatorType_names + 262, 15}, 18 },
  { {LogicalOperatorType_names + 277, 9}, 26 },
  { {LogicalOperatorType_names + 286, 10}, 43 },
  { {LogicalOperatorType_names + 296, 10}, 41 },
  { {LogicalOperatorType_names + 306, 17}, 16 },
  { {LogicalOperatorType_names + 323, 9}, 2 },
  { {LogicalOperatorType_names + 332, 6}, 13 },
  { {LogicalOperatorType_names + 338, 13}, 12 },
  { {LogicalOperatorType_names + 351, 9}, 29 },
  { {LogicalOperatorType_names + 360, 12}, 27 },
  { {LogicalOperatorType_names + 372, 10}, 0 },
  { {LogicalOperatorType_names + 382, 7}, 20 },
  { {LogicalOperatorType_names + 389, 8}, 6 },
  { {LogicalOperatorType_names + 397, 11}, 7 },
  { {LogicalOperatorType_names + 408, 9}, 39 },
  { {LogicalOperatorType_names + 417, 10}, 42 },
  { {LogicalOperatorType_names + 427, 13}, 1 },
  { {LogicalOperatorType_names + 440, 16}, 28 },
  { {LogicalOperatorType_names + 456, 17}, 17 },
  { {LogicalOperatorType_names + 473, 8}, 8 },
  { {LogicalOperatorType_names + 481, 14}, 40 },
  { {LogicalOperatorType_names + 495, 8}, 25 },
  { {LogicalOperatorType_names + 503, 9}, 5 },
  { {LogicalOperatorType_names + 512, 9}, 31 },
  { {LogicalOperatorType_names + 521, 9}, 44 },
  { {LogicalOperatorType_names + 530, 9}, 4 },
};

static const int LogicalOperatorType_entries_by_number[] = {
  29, // 0 -> OP_INVALID
  35, // 1 -> OP_PROJECTION
  24, // 2 -> OP_FILTER
  0, // 3 -> OP_AGGREGATE_AND_GROUP_BY
  44, // 4 -> OP_WINDOW
  41, // 5 -> OP_UNNEST
  31, // 6 -> OP_LIMIT
  32, // 7 -> OP_ORDER_BY
  38, // 8 -> OP_TOP_N
  5, // 9 -> OP_COPY_FROM_FILE
  6, // 10 -> OP_COPY_TO_FILE
  17, // 11 -> OP_DISTINCT
  26, // 12 -> OP_INDEX_SCAN
  25, // 13 -> OP_GET
  3, // 14 -> OP_CHUNK_GET
  15, // 15 -> OP_DELIM_GET
  23, // 16 -> OP_EXPRESSION_GET
  37, // 17 -> OP_TABLE_FUNCTION
  19, // 18 -> OP_EMPTY_RESULT
  13, // 19 -> OP_CTE_REF
  30, // 20 -> OP_JOIN
  16, // 21 -> OP_DELIM_JOIN
  4, // 22 -> OP_COMPARISON_JOIN
  2, // 23 -> OP_ANY_JOIN
  12, // 24 -> OP_CROSS_PRODUCT
  40, // 25 -> OP_UNION
  20, // 26 -> OP_EXCEPT
  28, // 27 -> OP_INTERSECT
  36, // 28 -> OP_RECURSIVE_CTE
  27, // 29 -> OP_INSERT
  14, // 30 -> OP_DELETE
  42, // 31 -> OP_UPDATE
  1, // 32 -> OP_ALTER
  10, // 33 -> OP_CREATE_TABLE
  7, // 34 -> OP_CREATE_INDEX
  9, // 35 -> OP_CREATE_SEQUENCE
  11, // 36 -> OP_CREATE_VIEW
  8, // 37 -> OP_CREATE_SCHEMA
  18, // 38 -> OP_DROP
  33, // 39 -> OP_PRAGMA
  39, // 40 -> OP_TRANSACTION
  22, // 41 -> OP_EXPLAIN
  34, // 42 -> OP_PREPARE
  21, // 43 -> OP_EXECUTE
  43, // 44 -> OP_VACUUM
};

const std::string& LogicalOperatorType_Name(
    LogicalOperatorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LogicalOperatorType_entries,
          LogicalOperatorType_entries_by_number,
          45, LogicalOperatorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LogicalOperatorType_entries,
      LogicalOperatorType_entries_by_number,
      45, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LogicalOperatorType_strings[idx].get();
}
bool LogicalOperatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalOperatorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LogicalOperatorType_entries, 45, name, &int_value);
  if (success) {
    *value = static_cast<LogicalOperatorType>(int_value);
  }
  return success;
}

// ===================================================================

class QueryPlan::_Internal {
 public:
};

QueryPlan::QueryPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  operator_children_(arena),
  operator_child_offsets_(arena),
  operator_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_webapi.proto.QueryPlan)
}
QueryPlan::QueryPlan(const QueryPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      operator_children_(from.operator_children_),
      operator_child_offsets_(from.operator_child_offsets_),
      operator_types_(from.operator_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:duckdb_webapi.proto.QueryPlan)
}

void QueryPlan::SharedCtor() {
}

QueryPlan::~QueryPlan() {
  // @@protoc_insertion_point(destructor:duckdb_webapi.proto.QueryPlan)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryPlan::ArenaDtor(void* object) {
  QueryPlan* _this = reinterpret_cast< QueryPlan* >(object);
  (void)_this;
}
void QueryPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPlan& QueryPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPlan_query_5fplan_2eproto.base);
  return *internal_default_instance();
}


void QueryPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_webapi.proto.QueryPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator_children_.Clear();
  operator_child_offsets_.Clear();
  operator_types_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QueryPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 operator_children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_operator_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_operator_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 operator_child_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_operator_child_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_webapi.proto.LogicalOperatorType operator_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operator_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operator_types(static_cast<::duckdb_webapi::proto::LogicalOperatorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_webapi.proto.QueryPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 operator_children = 1;
  {
    int byte_size = _operator_children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_operator_children(), byte_size, target);
    }
  }

  // repeated uint64 operator_child_offsets = 2;
  {
    int byte_size = _operator_child_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_operator_child_offsets(), byte_size, target);
    }
  }

  // repeated .duckdb_webapi.proto.LogicalOperatorType operator_types = 3;
  {
    int byte_size = _operator_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, operator_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_webapi.proto.QueryPlan)
  return target;
}

size_t QueryPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_webapi.proto.QueryPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 operator_children = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->operator_children_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 operator_child_offsets = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->operator_child_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_child_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .duckdb_webapi.proto.LogicalOperatorType operator_types = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operator_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_operator_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlan::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryPlan*>(
      &from));
}

void QueryPlan::MergeFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_webapi.proto.QueryPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operator_children_.MergeFrom(from.operator_children_);
  operator_child_offsets_.MergeFrom(from.operator_child_offsets_);
  operator_types_.MergeFrom(from.operator_types_);
}

void QueryPlan::CopyFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_webapi.proto.QueryPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlan::IsInitialized() const {
  return true;
}

void QueryPlan::InternalSwap(QueryPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  operator_children_.InternalSwap(&other->operator_children_);
  operator_child_offsets_.InternalSwap(&other->operator_child_offsets_);
  operator_types_.InternalSwap(&other->operator_types_);
}

std::string QueryPlan::GetTypeName() const {
  return "duckdb_webapi.proto.QueryPlan";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace duckdb_webapi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::duckdb_webapi::proto::QueryPlan* Arena::CreateMaybeMessage< ::duckdb_webapi::proto::QueryPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_webapi::proto::QueryPlan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
