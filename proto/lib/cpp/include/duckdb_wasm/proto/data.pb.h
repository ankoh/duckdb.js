// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace duckdb_wasm {
namespace proto {
class QueryPlan;
class QueryPlanDefaultTypeInternal;
extern QueryPlanDefaultTypeInternal _QueryPlan_default_instance_;
class QueryResult;
class QueryResultDefaultTypeInternal;
extern QueryResultDefaultTypeInternal _QueryResult_default_instance_;
class QueryResultChunk;
class QueryResultChunkDefaultTypeInternal;
extern QueryResultChunkDefaultTypeInternal _QueryResultChunk_default_instance_;
class QueryResultColumn;
class QueryResultColumnDefaultTypeInternal;
extern QueryResultColumnDefaultTypeInternal _QueryResultColumn_default_instance_;
class SQLType;
class SQLTypeDefaultTypeInternal;
extern SQLTypeDefaultTypeInternal _SQLType_default_instance_;
}  // namespace proto
}  // namespace duckdb_wasm
PROTOBUF_NAMESPACE_OPEN
template<> ::duckdb_wasm::proto::QueryPlan* Arena::CreateMaybeMessage<::duckdb_wasm::proto::QueryPlan>(Arena*);
template<> ::duckdb_wasm::proto::QueryResult* Arena::CreateMaybeMessage<::duckdb_wasm::proto::QueryResult>(Arena*);
template<> ::duckdb_wasm::proto::QueryResultChunk* Arena::CreateMaybeMessage<::duckdb_wasm::proto::QueryResultChunk>(Arena*);
template<> ::duckdb_wasm::proto::QueryResultColumn* Arena::CreateMaybeMessage<::duckdb_wasm::proto::QueryResultColumn>(Arena*);
template<> ::duckdb_wasm::proto::SQLType* Arena::CreateMaybeMessage<::duckdb_wasm::proto::SQLType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace duckdb_wasm {
namespace proto {

enum SQLTypeID : int {
  SQL_INVALID = 0,
  SQL_NULL = 1,
  SQL_UNKNOWN = 2,
  SQL_ANY = 3,
  SQL_BOOLEAN = 10,
  SQL_TINYINT = 11,
  SQL_SMALLINT = 12,
  SQL_INTEGER = 13,
  SQL_BIGINT = 14,
  SQL_DATE = 15,
  SQL_TIME = 16,
  SQL_TIMESTAMP = 17,
  SQL_FLOAT = 18,
  SQL_DOUBLE = 19,
  SQL_DECIMAL = 20,
  SQL_CHAR = 21,
  SQL_VARCHAR = 22,
  SQL_VARBINARY = 23,
  SQL_BLOB = 24,
  SQL_STRUCT = 100,
  SQL_LIST = 101,
  SQLTypeID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SQLTypeID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SQLTypeID_IsValid(int value);
constexpr SQLTypeID SQLTypeID_MIN = SQL_INVALID;
constexpr SQLTypeID SQLTypeID_MAX = SQL_LIST;
constexpr int SQLTypeID_ARRAYSIZE = SQLTypeID_MAX + 1;

const std::string& SQLTypeID_Name(SQLTypeID value);
template<typename T>
inline const std::string& SQLTypeID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SQLTypeID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SQLTypeID_Name.");
  return SQLTypeID_Name(static_cast<SQLTypeID>(enum_t_value));
}
bool SQLTypeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SQLTypeID* value);
enum LogicalOperatorType : int {
  OP_INVALID = 0,
  OP_PROJECTION = 1,
  OP_FILTER = 2,
  OP_AGGREGATE_AND_GROUP_BY = 3,
  OP_WINDOW = 4,
  OP_UNNEST = 5,
  OP_LIMIT = 6,
  OP_ORDER_BY = 7,
  OP_TOP_N = 8,
  OP_COPY_FROM_FILE = 9,
  OP_COPY_TO_FILE = 10,
  OP_DISTINCT = 11,
  OP_INDEX_SCAN = 12,
  OP_GET = 13,
  OP_CHUNK_GET = 14,
  OP_DELIM_GET = 15,
  OP_EXPRESSION_GET = 16,
  OP_TABLE_FUNCTION = 17,
  OP_EMPTY_RESULT = 18,
  OP_CTE_REF = 19,
  OP_JOIN = 20,
  OP_DELIM_JOIN = 21,
  OP_COMPARISON_JOIN = 22,
  OP_ANY_JOIN = 23,
  OP_CROSS_PRODUCT = 24,
  OP_UNION = 25,
  OP_EXCEPT = 26,
  OP_INTERSECT = 27,
  OP_RECURSIVE_CTE = 28,
  OP_INSERT = 29,
  OP_DELETE = 30,
  OP_UPDATE = 31,
  OP_ALTER = 32,
  OP_CREATE_TABLE = 33,
  OP_CREATE_INDEX = 34,
  OP_CREATE_SEQUENCE = 35,
  OP_CREATE_VIEW = 36,
  OP_CREATE_SCHEMA = 37,
  OP_DROP = 38,
  OP_PRAGMA = 39,
  OP_TRANSACTION = 40,
  OP_EXPLAIN = 41,
  OP_PREPARE = 42,
  OP_EXECUTE = 43,
  OP_VACUUM = 44,
  LogicalOperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogicalOperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogicalOperatorType_IsValid(int value);
constexpr LogicalOperatorType LogicalOperatorType_MIN = OP_INVALID;
constexpr LogicalOperatorType LogicalOperatorType_MAX = OP_VACUUM;
constexpr int LogicalOperatorType_ARRAYSIZE = LogicalOperatorType_MAX + 1;

const std::string& LogicalOperatorType_Name(LogicalOperatorType value);
template<typename T>
inline const std::string& LogicalOperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalOperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalOperatorType_Name.");
  return LogicalOperatorType_Name(static_cast<LogicalOperatorType>(enum_t_value));
}
bool LogicalOperatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalOperatorType* value);
// ===================================================================

class SQLType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.SQLType) */ {
 public:
  inline SQLType() : SQLType(nullptr) {}
  virtual ~SQLType();

  SQLType(const SQLType& from);
  SQLType(SQLType&& from) noexcept
    : SQLType() {
    *this = ::std::move(from);
  }

  inline SQLType& operator=(const SQLType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQLType& operator=(SQLType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SQLType& default_instance();

  static inline const SQLType* internal_default_instance() {
    return reinterpret_cast<const SQLType*>(
               &_SQLType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SQLType& a, SQLType& b) {
    a.Swap(&b);
  }
  inline void Swap(SQLType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQLType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SQLType* New() const final {
    return CreateMaybeMessage<SQLType>(nullptr);
  }

  SQLType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SQLType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SQLType& from);
  void MergeFrom(const SQLType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SQLType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.SQLType";
  }
  protected:
  explicit SQLType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollationFieldNumber = 4,
    kTypeIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // string collation = 4;
  void clear_collation();
  const std::string& collation() const;
  void set_collation(const std::string& value);
  void set_collation(std::string&& value);
  void set_collation(const char* value);
  void set_collation(const char* value, size_t size);
  std::string* mutable_collation();
  std::string* release_collation();
  void set_allocated_collation(std::string* collation);
  private:
  const std::string& _internal_collation() const;
  void _internal_set_collation(const std::string& value);
  std::string* _internal_mutable_collation();
  public:

  // .duckdb_wasm.proto.SQLTypeID type_id = 1;
  void clear_type_id();
  ::duckdb_wasm::proto::SQLTypeID type_id() const;
  void set_type_id(::duckdb_wasm::proto::SQLTypeID value);
  private:
  ::duckdb_wasm::proto::SQLTypeID _internal_type_id() const;
  void _internal_set_type_id(::duckdb_wasm::proto::SQLTypeID value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 scale = 3;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.SQLType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collation_;
  int type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class QueryPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.QueryPlan) */ {
 public:
  inline QueryPlan() : QueryPlan(nullptr) {}
  virtual ~QueryPlan();

  QueryPlan(const QueryPlan& from);
  QueryPlan(QueryPlan&& from) noexcept
    : QueryPlan() {
    *this = ::std::move(from);
  }

  inline QueryPlan& operator=(const QueryPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPlan& operator=(QueryPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QueryPlan& default_instance();

  static inline const QueryPlan* internal_default_instance() {
    return reinterpret_cast<const QueryPlan*>(
               &_QueryPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryPlan& a, QueryPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryPlan* New() const final {
    return CreateMaybeMessage<QueryPlan>(nullptr);
  }

  QueryPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryPlan>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryPlan& from);
  void MergeFrom(const QueryPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.QueryPlan";
  }
  protected:
  explicit QueryPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorChildrenFieldNumber = 1,
    kOperatorChildOffsetsFieldNumber = 2,
    kOperatorTypesFieldNumber = 3,
  };
  // repeated uint64 operator_children = 1;
  int operator_children_size() const;
  private:
  int _internal_operator_children_size() const;
  public:
  void clear_operator_children();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_operator_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_operator_children() const;
  void _internal_add_operator_children(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_operator_children();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_children(int index) const;
  void set_operator_children(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_operator_children(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      operator_children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_operator_children();

  // repeated uint64 operator_child_offsets = 2;
  int operator_child_offsets_size() const;
  private:
  int _internal_operator_child_offsets_size() const;
  public:
  void clear_operator_child_offsets();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_operator_child_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_operator_child_offsets() const;
  void _internal_add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_operator_child_offsets();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 operator_child_offsets(int index) const;
  void set_operator_child_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      operator_child_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_operator_child_offsets();

  // repeated .duckdb_wasm.proto.LogicalOperatorType operator_types = 3;
  int operator_types_size() const;
  private:
  int _internal_operator_types_size() const;
  public:
  void clear_operator_types();
  private:
  ::duckdb_wasm::proto::LogicalOperatorType _internal_operator_types(int index) const;
  void _internal_add_operator_types(::duckdb_wasm::proto::LogicalOperatorType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_operator_types();
  public:
  ::duckdb_wasm::proto::LogicalOperatorType operator_types(int index) const;
  void set_operator_types(int index, ::duckdb_wasm::proto::LogicalOperatorType value);
  void add_operator_types(::duckdb_wasm::proto::LogicalOperatorType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& operator_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_operator_types();

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.QueryPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > operator_children_;
  mutable std::atomic<int> _operator_children_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > operator_child_offsets_;
  mutable std::atomic<int> _operator_child_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> operator_types_;
  mutable std::atomic<int> _operator_types_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class QueryResultColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.QueryResultColumn) */ {
 public:
  inline QueryResultColumn() : QueryResultColumn(nullptr) {}
  virtual ~QueryResultColumn();

  QueryResultColumn(const QueryResultColumn& from);
  QueryResultColumn(QueryResultColumn&& from) noexcept
    : QueryResultColumn() {
    *this = ::std::move(from);
  }

  inline QueryResultColumn& operator=(const QueryResultColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResultColumn& operator=(QueryResultColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QueryResultColumn& default_instance();

  static inline const QueryResultColumn* internal_default_instance() {
    return reinterpret_cast<const QueryResultColumn*>(
               &_QueryResultColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryResultColumn& a, QueryResultColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResultColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResultColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResultColumn* New() const final {
    return CreateMaybeMessage<QueryResultColumn>(nullptr);
  }

  QueryResultColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResultColumn>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryResultColumn& from);
  void MergeFrom(const QueryResultColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResultColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.QueryResultColumn";
  }
  protected:
  explicit QueryResultColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullMaskFieldNumber = 1,
    kRowsBoolFieldNumber = 2,
    kRowsI32FieldNumber = 3,
    kRowsU32FieldNumber = 4,
    kRowsI64FieldNumber = 5,
    kRowsU64FieldNumber = 6,
    kRowsF32FieldNumber = 7,
    kRowsF64FieldNumber = 8,
    kRowsStrFieldNumber = 9,
  };
  // repeated bool null_mask = 1;
  int null_mask_size() const;
  private:
  int _internal_null_mask_size() const;
  public:
  void clear_null_mask();
  private:
  bool _internal_null_mask(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_null_mask() const;
  void _internal_add_null_mask(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_null_mask();
  public:
  bool null_mask(int index) const;
  void set_null_mask(int index, bool value);
  void add_null_mask(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      null_mask() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_null_mask();

  // repeated int32 rows_bool = 2;
  int rows_bool_size() const;
  private:
  int _internal_rows_bool_size() const;
  public:
  void clear_rows_bool();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows_bool(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rows_bool() const;
  void _internal_add_rows_bool(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rows_bool();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 rows_bool(int index) const;
  void set_rows_bool(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_rows_bool(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      rows_bool() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rows_bool();

  // repeated int32 rows_i32 = 3;
  int rows_i32_size() const;
  private:
  int _internal_rows_i32_size() const;
  public:
  void clear_rows_i32();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows_i32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rows_i32() const;
  void _internal_add_rows_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rows_i32();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 rows_i32(int index) const;
  void set_rows_i32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_rows_i32(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      rows_i32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rows_i32();

  // repeated uint32 rows_u32 = 4;
  int rows_u32_size() const;
  private:
  int _internal_rows_u32_size() const;
  public:
  void clear_rows_u32();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows_u32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rows_u32() const;
  void _internal_add_rows_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rows_u32();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_u32(int index) const;
  void set_rows_u32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rows_u32(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rows_u32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rows_u32();

  // repeated int64 rows_i64 = 5;
  int rows_i64_size() const;
  private:
  int _internal_rows_i64_size() const;
  public:
  void clear_rows_i64();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rows_i64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_rows_i64() const;
  void _internal_add_rows_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_rows_i64();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 rows_i64(int index) const;
  void set_rows_i64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_rows_i64(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      rows_i64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_rows_i64();

  // repeated uint64 rows_u64 = 6;
  int rows_u64_size() const;
  private:
  int _internal_rows_u64_size() const;
  public:
  void clear_rows_u64();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rows_u64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_rows_u64() const;
  void _internal_add_rows_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_rows_u64();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 rows_u64(int index) const;
  void set_rows_u64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_rows_u64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      rows_u64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_rows_u64();

  // repeated float rows_f32 = 7;
  int rows_f32_size() const;
  private:
  int _internal_rows_f32_size() const;
  public:
  void clear_rows_f32();
  private:
  float _internal_rows_f32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rows_f32() const;
  void _internal_add_rows_f32(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rows_f32();
  public:
  float rows_f32(int index) const;
  void set_rows_f32(int index, float value);
  void add_rows_f32(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rows_f32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rows_f32();

  // repeated double rows_f64 = 8;
  int rows_f64_size() const;
  private:
  int _internal_rows_f64_size() const;
  public:
  void clear_rows_f64();
  private:
  double _internal_rows_f64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rows_f64() const;
  void _internal_add_rows_f64(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rows_f64();
  public:
  double rows_f64(int index) const;
  void set_rows_f64(int index, double value);
  void add_rows_f64(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rows_f64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rows_f64();

  // repeated string rows_str = 9;
  int rows_str_size() const;
  private:
  int _internal_rows_str_size() const;
  public:
  void clear_rows_str();
  const std::string& rows_str(int index) const;
  std::string* mutable_rows_str(int index);
  void set_rows_str(int index, const std::string& value);
  void set_rows_str(int index, std::string&& value);
  void set_rows_str(int index, const char* value);
  void set_rows_str(int index, const char* value, size_t size);
  std::string* add_rows_str();
  void add_rows_str(const std::string& value);
  void add_rows_str(std::string&& value);
  void add_rows_str(const char* value);
  void add_rows_str(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& rows_str() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_rows_str();
  private:
  const std::string& _internal_rows_str(int index) const;
  std::string* _internal_add_rows_str();
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.QueryResultColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > null_mask_;
  mutable std::atomic<int> _null_mask_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > rows_bool_;
  mutable std::atomic<int> _rows_bool_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > rows_i32_;
  mutable std::atomic<int> _rows_i32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rows_u32_;
  mutable std::atomic<int> _rows_u32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > rows_i64_;
  mutable std::atomic<int> _rows_i64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > rows_u64_;
  mutable std::atomic<int> _rows_u64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rows_f32_;
  mutable std::atomic<int> _rows_f32_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rows_f64_;
  mutable std::atomic<int> _rows_f64_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> rows_str_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class QueryResultChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.QueryResultChunk) */ {
 public:
  inline QueryResultChunk() : QueryResultChunk(nullptr) {}
  virtual ~QueryResultChunk();

  QueryResultChunk(const QueryResultChunk& from);
  QueryResultChunk(QueryResultChunk&& from) noexcept
    : QueryResultChunk() {
    *this = ::std::move(from);
  }

  inline QueryResultChunk& operator=(const QueryResultChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResultChunk& operator=(QueryResultChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QueryResultChunk& default_instance();

  static inline const QueryResultChunk* internal_default_instance() {
    return reinterpret_cast<const QueryResultChunk*>(
               &_QueryResultChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryResultChunk& a, QueryResultChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResultChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResultChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResultChunk* New() const final {
    return CreateMaybeMessage<QueryResultChunk>(nullptr);
  }

  QueryResultChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResultChunk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryResultChunk& from);
  void MergeFrom(const QueryResultChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResultChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.QueryResultChunk";
  }
  protected:
  explicit QueryResultChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 3,
    kRowOffsetFieldNumber = 1,
    kRowCountFieldNumber = 2,
  };
  // repeated .duckdb_wasm.proto.QueryResultColumn columns = 3;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::duckdb_wasm::proto::QueryResultColumn* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultColumn >*
      mutable_columns();
  private:
  const ::duckdb_wasm::proto::QueryResultColumn& _internal_columns(int index) const;
  ::duckdb_wasm::proto::QueryResultColumn* _internal_add_columns();
  public:
  const ::duckdb_wasm::proto::QueryResultColumn& columns(int index) const;
  ::duckdb_wasm::proto::QueryResultColumn* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultColumn >&
      columns() const;

  // uint32 row_offset = 1;
  void clear_row_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_offset() const;
  void set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_offset() const;
  void _internal_set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 row_count = 2;
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.QueryResultChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultColumn > columns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class QueryResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.QueryResult) */ {
 public:
  inline QueryResult() : QueryResult(nullptr) {}
  virtual ~QueryResult();

  QueryResult(const QueryResult& from);
  QueryResult(QueryResult&& from) noexcept
    : QueryResult() {
    *this = ::std::move(from);
  }

  inline QueryResult& operator=(const QueryResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResult& operator=(QueryResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const QueryResult& default_instance();

  static inline const QueryResult* internal_default_instance() {
    return reinterpret_cast<const QueryResult*>(
               &_QueryResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryResult& a, QueryResult& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryResult* New() const final {
    return CreateMaybeMessage<QueryResult>(nullptr);
  }

  QueryResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QueryResult& from);
  void MergeFrom(const QueryResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.QueryResult";
  }
  protected:
  explicit QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNamesFieldNumber = 5,
    kColumnSqlTypesFieldNumber = 7,
    kDataChunksFieldNumber = 8,
    kQueryPlanFieldNumber = 2,
    kQueryIdFieldNumber = 1,
    kColumnCountFieldNumber = 3,
    kRowCountFieldNumber = 4,
  };
  // repeated string column_names = 5;
  int column_names_size() const;
  private:
  int _internal_column_names_size() const;
  public:
  void clear_column_names();
  const std::string& column_names(int index) const;
  std::string* mutable_column_names(int index);
  void set_column_names(int index, const std::string& value);
  void set_column_names(int index, std::string&& value);
  void set_column_names(int index, const char* value);
  void set_column_names(int index, const char* value, size_t size);
  std::string* add_column_names();
  void add_column_names(const std::string& value);
  void add_column_names(std::string&& value);
  void add_column_names(const char* value);
  void add_column_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_names();
  private:
  const std::string& _internal_column_names(int index) const;
  std::string* _internal_add_column_names();
  public:

  // repeated .duckdb_wasm.proto.SQLType column_sql_types = 7;
  int column_sql_types_size() const;
  private:
  int _internal_column_sql_types_size() const;
  public:
  void clear_column_sql_types();
  ::duckdb_wasm::proto::SQLType* mutable_column_sql_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::SQLType >*
      mutable_column_sql_types();
  private:
  const ::duckdb_wasm::proto::SQLType& _internal_column_sql_types(int index) const;
  ::duckdb_wasm::proto::SQLType* _internal_add_column_sql_types();
  public:
  const ::duckdb_wasm::proto::SQLType& column_sql_types(int index) const;
  ::duckdb_wasm::proto::SQLType* add_column_sql_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::SQLType >&
      column_sql_types() const;

  // repeated .duckdb_wasm.proto.QueryResultChunk data_chunks = 8;
  int data_chunks_size() const;
  private:
  int _internal_data_chunks_size() const;
  public:
  void clear_data_chunks();
  ::duckdb_wasm::proto::QueryResultChunk* mutable_data_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultChunk >*
      mutable_data_chunks();
  private:
  const ::duckdb_wasm::proto::QueryResultChunk& _internal_data_chunks(int index) const;
  ::duckdb_wasm::proto::QueryResultChunk* _internal_add_data_chunks();
  public:
  const ::duckdb_wasm::proto::QueryResultChunk& data_chunks(int index) const;
  ::duckdb_wasm::proto::QueryResultChunk* add_data_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultChunk >&
      data_chunks() const;

  // .duckdb_wasm.proto.QueryPlan query_plan = 2;
  bool has_query_plan() const;
  private:
  bool _internal_has_query_plan() const;
  public:
  void clear_query_plan();
  const ::duckdb_wasm::proto::QueryPlan& query_plan() const;
  ::duckdb_wasm::proto::QueryPlan* release_query_plan();
  ::duckdb_wasm::proto::QueryPlan* mutable_query_plan();
  void set_allocated_query_plan(::duckdb_wasm::proto::QueryPlan* query_plan);
  private:
  const ::duckdb_wasm::proto::QueryPlan& _internal_query_plan() const;
  ::duckdb_wasm::proto::QueryPlan* _internal_mutable_query_plan();
  public:
  void unsafe_arena_set_allocated_query_plan(
      ::duckdb_wasm::proto::QueryPlan* query_plan);
  ::duckdb_wasm::proto::QueryPlan* unsafe_arena_release_query_plan();

  // uint32 query_id = 1;
  void clear_query_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 query_id() const;
  void set_query_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_query_id() const;
  void _internal_set_query_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 column_count = 3;
  void clear_column_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count() const;
  void set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column_count() const;
  void _internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 row_count = 4;
  void clear_row_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count() const;
  void set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_row_count() const;
  void _internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.QueryResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::SQLType > column_sql_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultChunk > data_chunks_;
  ::duckdb_wasm::proto::QueryPlan* query_plan_;
  ::PROTOBUF_NAMESPACE_ID::uint32 query_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 row_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SQLType

// .duckdb_wasm.proto.SQLTypeID type_id = 1;
inline void SQLType::clear_type_id() {
  type_id_ = 0;
}
inline ::duckdb_wasm::proto::SQLTypeID SQLType::_internal_type_id() const {
  return static_cast< ::duckdb_wasm::proto::SQLTypeID >(type_id_);
}
inline ::duckdb_wasm::proto::SQLTypeID SQLType::type_id() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.type_id)
  return _internal_type_id();
}
inline void SQLType::_internal_set_type_id(::duckdb_wasm::proto::SQLTypeID value) {
  
  type_id_ = value;
}
inline void SQLType::set_type_id(::duckdb_wasm::proto::SQLTypeID value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.type_id)
}

// uint32 width = 2;
inline void SQLType::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::width() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.width)
  return _internal_width();
}
inline void SQLType::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void SQLType::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.width)
}

// uint32 scale = 3;
inline void SQLType::clear_scale() {
  scale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::scale() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.scale)
  return _internal_scale();
}
inline void SQLType::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  scale_ = value;
}
inline void SQLType::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.scale)
}

// string collation = 4;
inline void SQLType::clear_collation() {
  collation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SQLType::collation() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.collation)
  return _internal_collation();
}
inline void SQLType::set_collation(const std::string& value) {
  _internal_set_collation(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.collation)
}
inline std::string* SQLType::mutable_collation() {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.SQLType.collation)
  return _internal_mutable_collation();
}
inline const std::string& SQLType::_internal_collation() const {
  return collation_.Get();
}
inline void SQLType::_internal_set_collation(const std::string& value) {
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SQLType::set_collation(std::string&& value) {
  
  collation_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:duckdb_wasm.proto.SQLType.collation)
}
inline void SQLType::set_collation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.SQLType.collation)
}
inline void SQLType::set_collation(const char* value,
    size_t size) {
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.SQLType.collation)
}
inline std::string* SQLType::_internal_mutable_collation() {
  
  return collation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SQLType::release_collation() {
  // @@protoc_insertion_point(field_release:duckdb_wasm.proto.SQLType.collation)
  return collation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SQLType::set_allocated_collation(std::string* collation) {
  if (collation != nullptr) {
    
  } else {
    
  }
  collation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:duckdb_wasm.proto.SQLType.collation)
}

// -------------------------------------------------------------------

// QueryPlan

// repeated uint64 operator_children = 1;
inline int QueryPlan::_internal_operator_children_size() const {
  return operator_children_.size();
}
inline int QueryPlan::operator_children_size() const {
  return _internal_operator_children_size();
}
inline void QueryPlan::clear_operator_children() {
  operator_children_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlan::_internal_operator_children(int index) const {
  return operator_children_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlan::operator_children(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryPlan.operator_children)
  return _internal_operator_children(index);
}
inline void QueryPlan::set_operator_children(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  operator_children_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryPlan.operator_children)
}
inline void QueryPlan::_internal_add_operator_children(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  operator_children_.Add(value);
}
inline void QueryPlan::add_operator_children(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_operator_children(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryPlan.operator_children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryPlan::_internal_operator_children() const {
  return operator_children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryPlan::operator_children() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryPlan.operator_children)
  return _internal_operator_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryPlan::_internal_mutable_operator_children() {
  return &operator_children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryPlan::mutable_operator_children() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryPlan.operator_children)
  return _internal_mutable_operator_children();
}

// repeated uint64 operator_child_offsets = 2;
inline int QueryPlan::_internal_operator_child_offsets_size() const {
  return operator_child_offsets_.size();
}
inline int QueryPlan::operator_child_offsets_size() const {
  return _internal_operator_child_offsets_size();
}
inline void QueryPlan::clear_operator_child_offsets() {
  operator_child_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlan::_internal_operator_child_offsets(int index) const {
  return operator_child_offsets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryPlan::operator_child_offsets(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryPlan.operator_child_offsets)
  return _internal_operator_child_offsets(index);
}
inline void QueryPlan::set_operator_child_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  operator_child_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryPlan.operator_child_offsets)
}
inline void QueryPlan::_internal_add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  operator_child_offsets_.Add(value);
}
inline void QueryPlan::add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_operator_child_offsets(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryPlan.operator_child_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryPlan::_internal_operator_child_offsets() const {
  return operator_child_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryPlan::operator_child_offsets() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryPlan.operator_child_offsets)
  return _internal_operator_child_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryPlan::_internal_mutable_operator_child_offsets() {
  return &operator_child_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryPlan::mutable_operator_child_offsets() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryPlan.operator_child_offsets)
  return _internal_mutable_operator_child_offsets();
}

// repeated .duckdb_wasm.proto.LogicalOperatorType operator_types = 3;
inline int QueryPlan::_internal_operator_types_size() const {
  return operator_types_.size();
}
inline int QueryPlan::operator_types_size() const {
  return _internal_operator_types_size();
}
inline void QueryPlan::clear_operator_types() {
  operator_types_.Clear();
}
inline ::duckdb_wasm::proto::LogicalOperatorType QueryPlan::_internal_operator_types(int index) const {
  return static_cast< ::duckdb_wasm::proto::LogicalOperatorType >(operator_types_.Get(index));
}
inline ::duckdb_wasm::proto::LogicalOperatorType QueryPlan::operator_types(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryPlan.operator_types)
  return _internal_operator_types(index);
}
inline void QueryPlan::set_operator_types(int index, ::duckdb_wasm::proto::LogicalOperatorType value) {
  operator_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryPlan.operator_types)
}
inline void QueryPlan::_internal_add_operator_types(::duckdb_wasm::proto::LogicalOperatorType value) {
  operator_types_.Add(value);
}
inline void QueryPlan::add_operator_types(::duckdb_wasm::proto::LogicalOperatorType value) {
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryPlan.operator_types)
  _internal_add_operator_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
QueryPlan::operator_types() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryPlan.operator_types)
  return operator_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryPlan::_internal_mutable_operator_types() {
  return &operator_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryPlan::mutable_operator_types() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryPlan.operator_types)
  return _internal_mutable_operator_types();
}

// -------------------------------------------------------------------

// QueryResultColumn

// repeated bool null_mask = 1;
inline int QueryResultColumn::_internal_null_mask_size() const {
  return null_mask_.size();
}
inline int QueryResultColumn::null_mask_size() const {
  return _internal_null_mask_size();
}
inline void QueryResultColumn::clear_null_mask() {
  null_mask_.Clear();
}
inline bool QueryResultColumn::_internal_null_mask(int index) const {
  return null_mask_.Get(index);
}
inline bool QueryResultColumn::null_mask(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.null_mask)
  return _internal_null_mask(index);
}
inline void QueryResultColumn::set_null_mask(int index, bool value) {
  null_mask_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.null_mask)
}
inline void QueryResultColumn::_internal_add_null_mask(bool value) {
  null_mask_.Add(value);
}
inline void QueryResultColumn::add_null_mask(bool value) {
  _internal_add_null_mask(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.null_mask)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
QueryResultColumn::_internal_null_mask() const {
  return null_mask_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
QueryResultColumn::null_mask() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.null_mask)
  return _internal_null_mask();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
QueryResultColumn::_internal_mutable_null_mask() {
  return &null_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
QueryResultColumn::mutable_null_mask() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.null_mask)
  return _internal_mutable_null_mask();
}

// repeated int32 rows_bool = 2;
inline int QueryResultColumn::_internal_rows_bool_size() const {
  return rows_bool_.size();
}
inline int QueryResultColumn::rows_bool_size() const {
  return _internal_rows_bool_size();
}
inline void QueryResultColumn::clear_rows_bool() {
  rows_bool_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResultColumn::_internal_rows_bool(int index) const {
  return rows_bool_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResultColumn::rows_bool(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_bool)
  return _internal_rows_bool(index);
}
inline void QueryResultColumn::set_rows_bool(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  rows_bool_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_bool)
}
inline void QueryResultColumn::_internal_add_rows_bool(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rows_bool_.Add(value);
}
inline void QueryResultColumn::add_rows_bool(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_rows_bool(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResultColumn::_internal_rows_bool() const {
  return rows_bool_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResultColumn::rows_bool() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_bool)
  return _internal_rows_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResultColumn::_internal_mutable_rows_bool() {
  return &rows_bool_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResultColumn::mutable_rows_bool() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_bool)
  return _internal_mutable_rows_bool();
}

// repeated int32 rows_i32 = 3;
inline int QueryResultColumn::_internal_rows_i32_size() const {
  return rows_i32_.size();
}
inline int QueryResultColumn::rows_i32_size() const {
  return _internal_rows_i32_size();
}
inline void QueryResultColumn::clear_rows_i32() {
  rows_i32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResultColumn::_internal_rows_i32(int index) const {
  return rows_i32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryResultColumn::rows_i32(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_i32)
  return _internal_rows_i32(index);
}
inline void QueryResultColumn::set_rows_i32(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  rows_i32_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_i32)
}
inline void QueryResultColumn::_internal_add_rows_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  rows_i32_.Add(value);
}
inline void QueryResultColumn::add_rows_i32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_rows_i32(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_i32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResultColumn::_internal_rows_i32() const {
  return rows_i32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
QueryResultColumn::rows_i32() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_i32)
  return _internal_rows_i32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResultColumn::_internal_mutable_rows_i32() {
  return &rows_i32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
QueryResultColumn::mutable_rows_i32() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_i32)
  return _internal_mutable_rows_i32();
}

// repeated uint32 rows_u32 = 4;
inline int QueryResultColumn::_internal_rows_u32_size() const {
  return rows_u32_.size();
}
inline int QueryResultColumn::rows_u32_size() const {
  return _internal_rows_u32_size();
}
inline void QueryResultColumn::clear_rows_u32() {
  rows_u32_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultColumn::_internal_rows_u32(int index) const {
  return rows_u32_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultColumn::rows_u32(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_u32)
  return _internal_rows_u32(index);
}
inline void QueryResultColumn::set_rows_u32(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rows_u32_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_u32)
}
inline void QueryResultColumn::_internal_add_rows_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rows_u32_.Add(value);
}
inline void QueryResultColumn::add_rows_u32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rows_u32(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_u32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
QueryResultColumn::_internal_rows_u32() const {
  return rows_u32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
QueryResultColumn::rows_u32() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_u32)
  return _internal_rows_u32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
QueryResultColumn::_internal_mutable_rows_u32() {
  return &rows_u32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
QueryResultColumn::mutable_rows_u32() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_u32)
  return _internal_mutable_rows_u32();
}

// repeated int64 rows_i64 = 5;
inline int QueryResultColumn::_internal_rows_i64_size() const {
  return rows_i64_.size();
}
inline int QueryResultColumn::rows_i64_size() const {
  return _internal_rows_i64_size();
}
inline void QueryResultColumn::clear_rows_i64() {
  rows_i64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResultColumn::_internal_rows_i64(int index) const {
  return rows_i64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryResultColumn::rows_i64(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_i64)
  return _internal_rows_i64(index);
}
inline void QueryResultColumn::set_rows_i64(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  rows_i64_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_i64)
}
inline void QueryResultColumn::_internal_add_rows_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  rows_i64_.Add(value);
}
inline void QueryResultColumn::add_rows_i64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_rows_i64(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_i64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResultColumn::_internal_rows_i64() const {
  return rows_i64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
QueryResultColumn::rows_i64() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_i64)
  return _internal_rows_i64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResultColumn::_internal_mutable_rows_i64() {
  return &rows_i64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
QueryResultColumn::mutable_rows_i64() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_i64)
  return _internal_mutable_rows_i64();
}

// repeated uint64 rows_u64 = 6;
inline int QueryResultColumn::_internal_rows_u64_size() const {
  return rows_u64_.size();
}
inline int QueryResultColumn::rows_u64_size() const {
  return _internal_rows_u64_size();
}
inline void QueryResultColumn::clear_rows_u64() {
  rows_u64_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResultColumn::_internal_rows_u64(int index) const {
  return rows_u64_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryResultColumn::rows_u64(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_u64)
  return _internal_rows_u64(index);
}
inline void QueryResultColumn::set_rows_u64(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_u64_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_u64)
}
inline void QueryResultColumn::_internal_add_rows_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  rows_u64_.Add(value);
}
inline void QueryResultColumn::add_rows_u64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_rows_u64(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_u64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryResultColumn::_internal_rows_u64() const {
  return rows_u64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryResultColumn::rows_u64() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_u64)
  return _internal_rows_u64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryResultColumn::_internal_mutable_rows_u64() {
  return &rows_u64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryResultColumn::mutable_rows_u64() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_u64)
  return _internal_mutable_rows_u64();
}

// repeated float rows_f32 = 7;
inline int QueryResultColumn::_internal_rows_f32_size() const {
  return rows_f32_.size();
}
inline int QueryResultColumn::rows_f32_size() const {
  return _internal_rows_f32_size();
}
inline void QueryResultColumn::clear_rows_f32() {
  rows_f32_.Clear();
}
inline float QueryResultColumn::_internal_rows_f32(int index) const {
  return rows_f32_.Get(index);
}
inline float QueryResultColumn::rows_f32(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_f32)
  return _internal_rows_f32(index);
}
inline void QueryResultColumn::set_rows_f32(int index, float value) {
  rows_f32_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_f32)
}
inline void QueryResultColumn::_internal_add_rows_f32(float value) {
  rows_f32_.Add(value);
}
inline void QueryResultColumn::add_rows_f32(float value) {
  _internal_add_rows_f32(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_f32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResultColumn::_internal_rows_f32() const {
  return rows_f32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
QueryResultColumn::rows_f32() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_f32)
  return _internal_rows_f32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResultColumn::_internal_mutable_rows_f32() {
  return &rows_f32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
QueryResultColumn::mutable_rows_f32() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_f32)
  return _internal_mutable_rows_f32();
}

// repeated double rows_f64 = 8;
inline int QueryResultColumn::_internal_rows_f64_size() const {
  return rows_f64_.size();
}
inline int QueryResultColumn::rows_f64_size() const {
  return _internal_rows_f64_size();
}
inline void QueryResultColumn::clear_rows_f64() {
  rows_f64_.Clear();
}
inline double QueryResultColumn::_internal_rows_f64(int index) const {
  return rows_f64_.Get(index);
}
inline double QueryResultColumn::rows_f64(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_f64)
  return _internal_rows_f64(index);
}
inline void QueryResultColumn::set_rows_f64(int index, double value) {
  rows_f64_.Set(index, value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_f64)
}
inline void QueryResultColumn::_internal_add_rows_f64(double value) {
  rows_f64_.Add(value);
}
inline void QueryResultColumn::add_rows_f64(double value) {
  _internal_add_rows_f64(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_f64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResultColumn::_internal_rows_f64() const {
  return rows_f64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
QueryResultColumn::rows_f64() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_f64)
  return _internal_rows_f64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResultColumn::_internal_mutable_rows_f64() {
  return &rows_f64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
QueryResultColumn::mutable_rows_f64() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_f64)
  return _internal_mutable_rows_f64();
}

// repeated string rows_str = 9;
inline int QueryResultColumn::_internal_rows_str_size() const {
  return rows_str_.size();
}
inline int QueryResultColumn::rows_str_size() const {
  return _internal_rows_str_size();
}
inline void QueryResultColumn::clear_rows_str() {
  rows_str_.Clear();
}
inline std::string* QueryResultColumn::add_rows_str() {
  // @@protoc_insertion_point(field_add_mutable:duckdb_wasm.proto.QueryResultColumn.rows_str)
  return _internal_add_rows_str();
}
inline const std::string& QueryResultColumn::_internal_rows_str(int index) const {
  return rows_str_.Get(index);
}
inline const std::string& QueryResultColumn::rows_str(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultColumn.rows_str)
  return _internal_rows_str(index);
}
inline std::string* QueryResultColumn::mutable_rows_str(int index) {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResultColumn.rows_str)
  return rows_str_.Mutable(index);
}
inline void QueryResultColumn::set_rows_str(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_str)
  rows_str_.Mutable(index)->assign(value);
}
inline void QueryResultColumn::set_rows_str(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultColumn.rows_str)
  rows_str_.Mutable(index)->assign(std::move(value));
}
inline void QueryResultColumn::set_rows_str(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rows_str_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline void QueryResultColumn::set_rows_str(int index, const char* value, size_t size) {
  rows_str_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline std::string* QueryResultColumn::_internal_add_rows_str() {
  return rows_str_.Add();
}
inline void QueryResultColumn::add_rows_str(const std::string& value) {
  rows_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline void QueryResultColumn::add_rows_str(std::string&& value) {
  rows_str_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline void QueryResultColumn::add_rows_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  rows_str_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline void QueryResultColumn::add_rows_str(const char* value, size_t size) {
  rows_str_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:duckdb_wasm.proto.QueryResultColumn.rows_str)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResultColumn::rows_str() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultColumn.rows_str)
  return rows_str_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResultColumn::mutable_rows_str() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultColumn.rows_str)
  return &rows_str_;
}

// -------------------------------------------------------------------

// QueryResultChunk

// uint32 row_offset = 1;
inline void QueryResultChunk::clear_row_offset() {
  row_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultChunk::_internal_row_offset() const {
  return row_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultChunk::row_offset() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultChunk.row_offset)
  return _internal_row_offset();
}
inline void QueryResultChunk::_internal_set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  row_offset_ = value;
}
inline void QueryResultChunk::set_row_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_offset(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultChunk.row_offset)
}

// uint32 row_count = 2;
inline void QueryResultChunk::clear_row_count() {
  row_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultChunk::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResultChunk::row_count() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultChunk.row_count)
  return _internal_row_count();
}
inline void QueryResultChunk::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  row_count_ = value;
}
inline void QueryResultChunk::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResultChunk.row_count)
}

// repeated .duckdb_wasm.proto.QueryResultColumn columns = 3;
inline int QueryResultChunk::_internal_columns_size() const {
  return columns_.size();
}
inline int QueryResultChunk::columns_size() const {
  return _internal_columns_size();
}
inline void QueryResultChunk::clear_columns() {
  columns_.Clear();
}
inline ::duckdb_wasm::proto::QueryResultColumn* QueryResultChunk::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResultChunk.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultColumn >*
QueryResultChunk::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResultChunk.columns)
  return &columns_;
}
inline const ::duckdb_wasm::proto::QueryResultColumn& QueryResultChunk::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::duckdb_wasm::proto::QueryResultColumn& QueryResultChunk::columns(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResultChunk.columns)
  return _internal_columns(index);
}
inline ::duckdb_wasm::proto::QueryResultColumn* QueryResultChunk::_internal_add_columns() {
  return columns_.Add();
}
inline ::duckdb_wasm::proto::QueryResultColumn* QueryResultChunk::add_columns() {
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResultChunk.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultColumn >&
QueryResultChunk::columns() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResultChunk.columns)
  return columns_;
}

// -------------------------------------------------------------------

// QueryResult

// uint32 query_id = 1;
inline void QueryResult::clear_query_id() {
  query_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::_internal_query_id() const {
  return query_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::query_id() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.query_id)
  return _internal_query_id();
}
inline void QueryResult::_internal_set_query_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  query_id_ = value;
}
inline void QueryResult::set_query_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_query_id(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResult.query_id)
}

// .duckdb_wasm.proto.QueryPlan query_plan = 2;
inline bool QueryResult::_internal_has_query_plan() const {
  return this != internal_default_instance() && query_plan_ != nullptr;
}
inline bool QueryResult::has_query_plan() const {
  return _internal_has_query_plan();
}
inline void QueryResult::clear_query_plan() {
  if (GetArena() == nullptr && query_plan_ != nullptr) {
    delete query_plan_;
  }
  query_plan_ = nullptr;
}
inline const ::duckdb_wasm::proto::QueryPlan& QueryResult::_internal_query_plan() const {
  const ::duckdb_wasm::proto::QueryPlan* p = query_plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::duckdb_wasm::proto::QueryPlan&>(
      ::duckdb_wasm::proto::_QueryPlan_default_instance_);
}
inline const ::duckdb_wasm::proto::QueryPlan& QueryResult::query_plan() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.query_plan)
  return _internal_query_plan();
}
inline void QueryResult::unsafe_arena_set_allocated_query_plan(
    ::duckdb_wasm::proto::QueryPlan* query_plan) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_plan_);
  }
  query_plan_ = query_plan;
  if (query_plan) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:duckdb_wasm.proto.QueryResult.query_plan)
}
inline ::duckdb_wasm::proto::QueryPlan* QueryResult::release_query_plan() {
  
  ::duckdb_wasm::proto::QueryPlan* temp = query_plan_;
  query_plan_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::duckdb_wasm::proto::QueryPlan* QueryResult::unsafe_arena_release_query_plan() {
  // @@protoc_insertion_point(field_release:duckdb_wasm.proto.QueryResult.query_plan)
  
  ::duckdb_wasm::proto::QueryPlan* temp = query_plan_;
  query_plan_ = nullptr;
  return temp;
}
inline ::duckdb_wasm::proto::QueryPlan* QueryResult::_internal_mutable_query_plan() {
  
  if (query_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::duckdb_wasm::proto::QueryPlan>(GetArena());
    query_plan_ = p;
  }
  return query_plan_;
}
inline ::duckdb_wasm::proto::QueryPlan* QueryResult::mutable_query_plan() {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResult.query_plan)
  return _internal_mutable_query_plan();
}
inline void QueryResult::set_allocated_query_plan(::duckdb_wasm::proto::QueryPlan* query_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete query_plan_;
  }
  if (query_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(query_plan);
    if (message_arena != submessage_arena) {
      query_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_plan, submessage_arena);
    }
    
  } else {
    
  }
  query_plan_ = query_plan;
  // @@protoc_insertion_point(field_set_allocated:duckdb_wasm.proto.QueryResult.query_plan)
}

// uint32 column_count = 3;
inline void QueryResult::clear_column_count() {
  column_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::_internal_column_count() const {
  return column_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::column_count() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.column_count)
  return _internal_column_count();
}
inline void QueryResult::_internal_set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_count_ = value;
}
inline void QueryResult::set_column_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResult.column_count)
}

// uint32 row_count = 4;
inline void QueryResult::clear_row_count() {
  row_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::_internal_row_count() const {
  return row_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryResult::row_count() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.row_count)
  return _internal_row_count();
}
inline void QueryResult::_internal_set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  row_count_ = value;
}
inline void QueryResult::set_row_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResult.row_count)
}

// repeated string column_names = 5;
inline int QueryResult::_internal_column_names_size() const {
  return column_names_.size();
}
inline int QueryResult::column_names_size() const {
  return _internal_column_names_size();
}
inline void QueryResult::clear_column_names() {
  column_names_.Clear();
}
inline std::string* QueryResult::add_column_names() {
  // @@protoc_insertion_point(field_add_mutable:duckdb_wasm.proto.QueryResult.column_names)
  return _internal_add_column_names();
}
inline const std::string& QueryResult::_internal_column_names(int index) const {
  return column_names_.Get(index);
}
inline const std::string& QueryResult::column_names(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.column_names)
  return _internal_column_names(index);
}
inline std::string* QueryResult::mutable_column_names(int index) {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResult.column_names)
  return column_names_.Mutable(index);
}
inline void QueryResult::set_column_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResult.column_names)
  column_names_.Mutable(index)->assign(value);
}
inline void QueryResult::set_column_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.QueryResult.column_names)
  column_names_.Mutable(index)->assign(std::move(value));
}
inline void QueryResult::set_column_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.QueryResult.column_names)
}
inline void QueryResult::set_column_names(int index, const char* value, size_t size) {
  column_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.QueryResult.column_names)
}
inline std::string* QueryResult::_internal_add_column_names() {
  return column_names_.Add();
}
inline void QueryResult::add_column_names(const std::string& value) {
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResult.column_names)
}
inline void QueryResult::add_column_names(std::string&& value) {
  column_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResult.column_names)
}
inline void QueryResult::add_column_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:duckdb_wasm.proto.QueryResult.column_names)
}
inline void QueryResult::add_column_names(const char* value, size_t size) {
  column_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:duckdb_wasm.proto.QueryResult.column_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryResult::column_names() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResult.column_names)
  return column_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryResult::mutable_column_names() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResult.column_names)
  return &column_names_;
}

// repeated .duckdb_wasm.proto.SQLType column_sql_types = 7;
inline int QueryResult::_internal_column_sql_types_size() const {
  return column_sql_types_.size();
}
inline int QueryResult::column_sql_types_size() const {
  return _internal_column_sql_types_size();
}
inline void QueryResult::clear_column_sql_types() {
  column_sql_types_.Clear();
}
inline ::duckdb_wasm::proto::SQLType* QueryResult::mutable_column_sql_types(int index) {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResult.column_sql_types)
  return column_sql_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::SQLType >*
QueryResult::mutable_column_sql_types() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResult.column_sql_types)
  return &column_sql_types_;
}
inline const ::duckdb_wasm::proto::SQLType& QueryResult::_internal_column_sql_types(int index) const {
  return column_sql_types_.Get(index);
}
inline const ::duckdb_wasm::proto::SQLType& QueryResult::column_sql_types(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.column_sql_types)
  return _internal_column_sql_types(index);
}
inline ::duckdb_wasm::proto::SQLType* QueryResult::_internal_add_column_sql_types() {
  return column_sql_types_.Add();
}
inline ::duckdb_wasm::proto::SQLType* QueryResult::add_column_sql_types() {
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResult.column_sql_types)
  return _internal_add_column_sql_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::SQLType >&
QueryResult::column_sql_types() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResult.column_sql_types)
  return column_sql_types_;
}

// repeated .duckdb_wasm.proto.QueryResultChunk data_chunks = 8;
inline int QueryResult::_internal_data_chunks_size() const {
  return data_chunks_.size();
}
inline int QueryResult::data_chunks_size() const {
  return _internal_data_chunks_size();
}
inline void QueryResult::clear_data_chunks() {
  data_chunks_.Clear();
}
inline ::duckdb_wasm::proto::QueryResultChunk* QueryResult::mutable_data_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.QueryResult.data_chunks)
  return data_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultChunk >*
QueryResult::mutable_data_chunks() {
  // @@protoc_insertion_point(field_mutable_list:duckdb_wasm.proto.QueryResult.data_chunks)
  return &data_chunks_;
}
inline const ::duckdb_wasm::proto::QueryResultChunk& QueryResult::_internal_data_chunks(int index) const {
  return data_chunks_.Get(index);
}
inline const ::duckdb_wasm::proto::QueryResultChunk& QueryResult::data_chunks(int index) const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.QueryResult.data_chunks)
  return _internal_data_chunks(index);
}
inline ::duckdb_wasm::proto::QueryResultChunk* QueryResult::_internal_add_data_chunks() {
  return data_chunks_.Add();
}
inline ::duckdb_wasm::proto::QueryResultChunk* QueryResult::add_data_chunks() {
  // @@protoc_insertion_point(field_add:duckdb_wasm.proto.QueryResult.data_chunks)
  return _internal_add_data_chunks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::duckdb_wasm::proto::QueryResultChunk >&
QueryResult::data_chunks() const {
  // @@protoc_insertion_point(field_list:duckdb_wasm.proto.QueryResult.data_chunks)
  return data_chunks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace duckdb_wasm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::duckdb_wasm::proto::SQLTypeID> : ::std::true_type {};
template <> struct is_proto_enum< ::duckdb_wasm::proto::LogicalOperatorType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
