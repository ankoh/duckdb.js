// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPlan_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResultChunk_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResultColumn_data_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SQLType_data_2eproto;
namespace duckdb_wasm {
namespace proto {
class SQLTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SQLType> _instance;
} _SQLType_default_instance_;
class QueryPlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryPlan> _instance;
} _QueryPlan_default_instance_;
class QueryResultColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResultColumn> _instance;
} _QueryResultColumn_default_instance_;
class QueryResultChunkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResultChunk> _instance;
} _QueryResultChunk_default_instance_;
class QueryResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResult> _instance;
} _QueryResult_default_instance_;
}  // namespace proto
}  // namespace duckdb_wasm
static void InitDefaultsscc_info_QueryPlan_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_wasm::proto::_QueryPlan_default_instance_;
    new (ptr) ::duckdb_wasm::proto::QueryPlan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryPlan_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryPlan_data_2eproto}, {}};

static void InitDefaultsscc_info_QueryResult_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_wasm::proto::_QueryResult_default_instance_;
    new (ptr) ::duckdb_wasm::proto::QueryResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_QueryResult_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_QueryResult_data_2eproto}, {
      &scc_info_QueryPlan_data_2eproto.base,
      &scc_info_SQLType_data_2eproto.base,
      &scc_info_QueryResultChunk_data_2eproto.base,}};

static void InitDefaultsscc_info_QueryResultChunk_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_wasm::proto::_QueryResultChunk_default_instance_;
    new (ptr) ::duckdb_wasm::proto::QueryResultChunk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryResultChunk_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryResultChunk_data_2eproto}, {
      &scc_info_QueryResultColumn_data_2eproto.base,}};

static void InitDefaultsscc_info_QueryResultColumn_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_wasm::proto::_QueryResultColumn_default_instance_;
    new (ptr) ::duckdb_wasm::proto::QueryResultColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryResultColumn_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryResultColumn_data_2eproto}, {}};

static void InitDefaultsscc_info_SQLType_data_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::duckdb_wasm::proto::_SQLType_default_instance_;
    new (ptr) ::duckdb_wasm::proto::SQLType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SQLType_data_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SQLType_data_2eproto}, {}};

namespace duckdb_wasm {
namespace proto {
bool SQLTypeID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SQLTypeID_strings[21] = {};

static const char SQLTypeID_names[] =
  "SQL_ANY"
  "SQL_BIGINT"
  "SQL_BLOB"
  "SQL_BOOLEAN"
  "SQL_CHAR"
  "SQL_DATE"
  "SQL_DECIMAL"
  "SQL_DOUBLE"
  "SQL_FLOAT"
  "SQL_INTEGER"
  "SQL_INVALID"
  "SQL_LIST"
  "SQL_NULL"
  "SQL_SMALLINT"
  "SQL_STRUCT"
  "SQL_TIME"
  "SQL_TIMESTAMP"
  "SQL_TINYINT"
  "SQL_UNKNOWN"
  "SQL_VARBINARY"
  "SQL_VARCHAR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SQLTypeID_entries[] = {
  { {SQLTypeID_names + 0, 7}, 3 },
  { {SQLTypeID_names + 7, 10}, 14 },
  { {SQLTypeID_names + 17, 8}, 24 },
  { {SQLTypeID_names + 25, 11}, 10 },
  { {SQLTypeID_names + 36, 8}, 21 },
  { {SQLTypeID_names + 44, 8}, 15 },
  { {SQLTypeID_names + 52, 11}, 20 },
  { {SQLTypeID_names + 63, 10}, 19 },
  { {SQLTypeID_names + 73, 9}, 18 },
  { {SQLTypeID_names + 82, 11}, 13 },
  { {SQLTypeID_names + 93, 11}, 0 },
  { {SQLTypeID_names + 104, 8}, 101 },
  { {SQLTypeID_names + 112, 8}, 1 },
  { {SQLTypeID_names + 120, 12}, 12 },
  { {SQLTypeID_names + 132, 10}, 100 },
  { {SQLTypeID_names + 142, 8}, 16 },
  { {SQLTypeID_names + 150, 13}, 17 },
  { {SQLTypeID_names + 163, 11}, 11 },
  { {SQLTypeID_names + 174, 11}, 2 },
  { {SQLTypeID_names + 185, 13}, 23 },
  { {SQLTypeID_names + 198, 11}, 22 },
};

static const int SQLTypeID_entries_by_number[] = {
  10, // 0 -> SQL_INVALID
  12, // 1 -> SQL_NULL
  18, // 2 -> SQL_UNKNOWN
  0, // 3 -> SQL_ANY
  3, // 10 -> SQL_BOOLEAN
  17, // 11 -> SQL_TINYINT
  13, // 12 -> SQL_SMALLINT
  9, // 13 -> SQL_INTEGER
  1, // 14 -> SQL_BIGINT
  5, // 15 -> SQL_DATE
  15, // 16 -> SQL_TIME
  16, // 17 -> SQL_TIMESTAMP
  8, // 18 -> SQL_FLOAT
  7, // 19 -> SQL_DOUBLE
  6, // 20 -> SQL_DECIMAL
  4, // 21 -> SQL_CHAR
  20, // 22 -> SQL_VARCHAR
  19, // 23 -> SQL_VARBINARY
  2, // 24 -> SQL_BLOB
  14, // 100 -> SQL_STRUCT
  11, // 101 -> SQL_LIST
};

const std::string& SQLTypeID_Name(
    SQLTypeID value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SQLTypeID_entries,
          SQLTypeID_entries_by_number,
          21, SQLTypeID_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SQLTypeID_entries,
      SQLTypeID_entries_by_number,
      21, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SQLTypeID_strings[idx].get();
}
bool SQLTypeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SQLTypeID* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SQLTypeID_entries, 21, name, &int_value);
  if (success) {
    *value = static_cast<SQLTypeID>(int_value);
  }
  return success;
}
bool LogicalOperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LogicalOperatorType_strings[45] = {};

static const char LogicalOperatorType_names[] =
  "OP_AGGREGATE_AND_GROUP_BY"
  "OP_ALTER"
  "OP_ANY_JOIN"
  "OP_CHUNK_GET"
  "OP_COMPARISON_JOIN"
  "OP_COPY_FROM_FILE"
  "OP_COPY_TO_FILE"
  "OP_CREATE_INDEX"
  "OP_CREATE_SCHEMA"
  "OP_CREATE_SEQUENCE"
  "OP_CREATE_TABLE"
  "OP_CREATE_VIEW"
  "OP_CROSS_PRODUCT"
  "OP_CTE_REF"
  "OP_DELETE"
  "OP_DELIM_GET"
  "OP_DELIM_JOIN"
  "OP_DISTINCT"
  "OP_DROP"
  "OP_EMPTY_RESULT"
  "OP_EXCEPT"
  "OP_EXECUTE"
  "OP_EXPLAIN"
  "OP_EXPRESSION_GET"
  "OP_FILTER"
  "OP_GET"
  "OP_INDEX_SCAN"
  "OP_INSERT"
  "OP_INTERSECT"
  "OP_INVALID"
  "OP_JOIN"
  "OP_LIMIT"
  "OP_ORDER_BY"
  "OP_PRAGMA"
  "OP_PREPARE"
  "OP_PROJECTION"
  "OP_RECURSIVE_CTE"
  "OP_TABLE_FUNCTION"
  "OP_TOP_N"
  "OP_TRANSACTION"
  "OP_UNION"
  "OP_UNNEST"
  "OP_UPDATE"
  "OP_VACUUM"
  "OP_WINDOW";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LogicalOperatorType_entries[] = {
  { {LogicalOperatorType_names + 0, 25}, 3 },
  { {LogicalOperatorType_names + 25, 8}, 32 },
  { {LogicalOperatorType_names + 33, 11}, 23 },
  { {LogicalOperatorType_names + 44, 12}, 14 },
  { {LogicalOperatorType_names + 56, 18}, 22 },
  { {LogicalOperatorType_names + 74, 17}, 9 },
  { {LogicalOperatorType_names + 91, 15}, 10 },
  { {LogicalOperatorType_names + 106, 15}, 34 },
  { {LogicalOperatorType_names + 121, 16}, 37 },
  { {LogicalOperatorType_names + 137, 18}, 35 },
  { {LogicalOperatorType_names + 155, 15}, 33 },
  { {LogicalOperatorType_names + 170, 14}, 36 },
  { {LogicalOperatorType_names + 184, 16}, 24 },
  { {LogicalOperatorType_names + 200, 10}, 19 },
  { {LogicalOperatorType_names + 210, 9}, 30 },
  { {LogicalOperatorType_names + 219, 12}, 15 },
  { {LogicalOperatorType_names + 231, 13}, 21 },
  { {LogicalOperatorType_names + 244, 11}, 11 },
  { {LogicalOperatorType_names + 255, 7}, 38 },
  { {LogicalOperatorType_names + 262, 15}, 18 },
  { {LogicalOperatorType_names + 277, 9}, 26 },
  { {LogicalOperatorType_names + 286, 10}, 43 },
  { {LogicalOperatorType_names + 296, 10}, 41 },
  { {LogicalOperatorType_names + 306, 17}, 16 },
  { {LogicalOperatorType_names + 323, 9}, 2 },
  { {LogicalOperatorType_names + 332, 6}, 13 },
  { {LogicalOperatorType_names + 338, 13}, 12 },
  { {LogicalOperatorType_names + 351, 9}, 29 },
  { {LogicalOperatorType_names + 360, 12}, 27 },
  { {LogicalOperatorType_names + 372, 10}, 0 },
  { {LogicalOperatorType_names + 382, 7}, 20 },
  { {LogicalOperatorType_names + 389, 8}, 6 },
  { {LogicalOperatorType_names + 397, 11}, 7 },
  { {LogicalOperatorType_names + 408, 9}, 39 },
  { {LogicalOperatorType_names + 417, 10}, 42 },
  { {LogicalOperatorType_names + 427, 13}, 1 },
  { {LogicalOperatorType_names + 440, 16}, 28 },
  { {LogicalOperatorType_names + 456, 17}, 17 },
  { {LogicalOperatorType_names + 473, 8}, 8 },
  { {LogicalOperatorType_names + 481, 14}, 40 },
  { {LogicalOperatorType_names + 495, 8}, 25 },
  { {LogicalOperatorType_names + 503, 9}, 5 },
  { {LogicalOperatorType_names + 512, 9}, 31 },
  { {LogicalOperatorType_names + 521, 9}, 44 },
  { {LogicalOperatorType_names + 530, 9}, 4 },
};

static const int LogicalOperatorType_entries_by_number[] = {
  29, // 0 -> OP_INVALID
  35, // 1 -> OP_PROJECTION
  24, // 2 -> OP_FILTER
  0, // 3 -> OP_AGGREGATE_AND_GROUP_BY
  44, // 4 -> OP_WINDOW
  41, // 5 -> OP_UNNEST
  31, // 6 -> OP_LIMIT
  32, // 7 -> OP_ORDER_BY
  38, // 8 -> OP_TOP_N
  5, // 9 -> OP_COPY_FROM_FILE
  6, // 10 -> OP_COPY_TO_FILE
  17, // 11 -> OP_DISTINCT
  26, // 12 -> OP_INDEX_SCAN
  25, // 13 -> OP_GET
  3, // 14 -> OP_CHUNK_GET
  15, // 15 -> OP_DELIM_GET
  23, // 16 -> OP_EXPRESSION_GET
  37, // 17 -> OP_TABLE_FUNCTION
  19, // 18 -> OP_EMPTY_RESULT
  13, // 19 -> OP_CTE_REF
  30, // 20 -> OP_JOIN
  16, // 21 -> OP_DELIM_JOIN
  4, // 22 -> OP_COMPARISON_JOIN
  2, // 23 -> OP_ANY_JOIN
  12, // 24 -> OP_CROSS_PRODUCT
  40, // 25 -> OP_UNION
  20, // 26 -> OP_EXCEPT
  28, // 27 -> OP_INTERSECT
  36, // 28 -> OP_RECURSIVE_CTE
  27, // 29 -> OP_INSERT
  14, // 30 -> OP_DELETE
  42, // 31 -> OP_UPDATE
  1, // 32 -> OP_ALTER
  10, // 33 -> OP_CREATE_TABLE
  7, // 34 -> OP_CREATE_INDEX
  9, // 35 -> OP_CREATE_SEQUENCE
  11, // 36 -> OP_CREATE_VIEW
  8, // 37 -> OP_CREATE_SCHEMA
  18, // 38 -> OP_DROP
  33, // 39 -> OP_PRAGMA
  39, // 40 -> OP_TRANSACTION
  22, // 41 -> OP_EXPLAIN
  34, // 42 -> OP_PREPARE
  21, // 43 -> OP_EXECUTE
  43, // 44 -> OP_VACUUM
};

const std::string& LogicalOperatorType_Name(
    LogicalOperatorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LogicalOperatorType_entries,
          LogicalOperatorType_entries_by_number,
          45, LogicalOperatorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LogicalOperatorType_entries,
      LogicalOperatorType_entries_by_number,
      45, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LogicalOperatorType_strings[idx].get();
}
bool LogicalOperatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalOperatorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LogicalOperatorType_entries, 45, name, &int_value);
  if (success) {
    *value = static_cast<LogicalOperatorType>(int_value);
  }
  return success;
}

// ===================================================================

class SQLType::_Internal {
 public:
};

SQLType::SQLType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_wasm.proto.SQLType)
}
SQLType::SQLType(const SQLType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  collation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collation().empty()) {
    collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collation(),
      GetArena());
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:duckdb_wasm.proto.SQLType)
}

void SQLType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SQLType_data_2eproto.base);
  collation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
}

SQLType::~SQLType() {
  // @@protoc_insertion_point(destructor:duckdb_wasm.proto.SQLType)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void SQLType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  collation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SQLType::ArenaDtor(void* object) {
  SQLType* _this = reinterpret_cast< SQLType* >(object);
  (void)_this;
}
void SQLType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SQLType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SQLType& SQLType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SQLType_data_2eproto.base);
  return *internal_default_instance();
}


void SQLType::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_wasm.proto.SQLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(scale_));
  _internal_metadata_.Clear<std::string>();
}

const char* SQLType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .duckdb_wasm.proto.SQLTypeID type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_id(static_cast<::duckdb_wasm::proto::SQLTypeID>(val));
        } else goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string collation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_collation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SQLType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_wasm.proto.SQLType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .duckdb_wasm.proto.SQLTypeID type_id = 1;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_id(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 scale = 3;
  if (this->scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_scale(), target);
  }

  // string collation = 4;
  if (this->collation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collation().data(), static_cast<int>(this->_internal_collation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_wasm.proto.SQLType.collation");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_collation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_wasm.proto.SQLType)
  return target;
}

size_t SQLType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_wasm.proto.SQLType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collation = 4;
  if (this->collation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collation());
  }

  // .duckdb_wasm.proto.SQLTypeID type_id = 1;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_id());
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SQLType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SQLType*>(
      &from));
}

void SQLType::MergeFrom(const SQLType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_wasm.proto.SQLType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collation().size() > 0) {
    _internal_set_collation(from._internal_collation());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.scale() != 0) {
    _internal_set_scale(from._internal_scale());
  }
}

void SQLType::CopyFrom(const SQLType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_wasm.proto.SQLType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SQLType::IsInitialized() const {
  return true;
}

void SQLType::InternalSwap(SQLType* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  collation_.Swap(&other->collation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SQLType, scale_)
      + sizeof(SQLType::scale_)
      - PROTOBUF_FIELD_OFFSET(SQLType, type_id_)>(
          reinterpret_cast<char*>(&type_id_),
          reinterpret_cast<char*>(&other->type_id_));
}

std::string SQLType::GetTypeName() const {
  return "duckdb_wasm.proto.SQLType";
}


// ===================================================================

class QueryPlan::_Internal {
 public:
};

QueryPlan::QueryPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  operator_children_(arena),
  operator_child_offsets_(arena),
  operator_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_wasm.proto.QueryPlan)
}
QueryPlan::QueryPlan(const QueryPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      operator_children_(from.operator_children_),
      operator_child_offsets_(from.operator_child_offsets_),
      operator_types_(from.operator_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:duckdb_wasm.proto.QueryPlan)
}

void QueryPlan::SharedCtor() {
}

QueryPlan::~QueryPlan() {
  // @@protoc_insertion_point(destructor:duckdb_wasm.proto.QueryPlan)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryPlan::ArenaDtor(void* object) {
  QueryPlan* _this = reinterpret_cast< QueryPlan* >(object);
  (void)_this;
}
void QueryPlan::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryPlan& QueryPlan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryPlan_data_2eproto.base);
  return *internal_default_instance();
}


void QueryPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_wasm.proto.QueryPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator_children_.Clear();
  operator_child_offsets_.Clear();
  operator_types_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QueryPlan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 operator_children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_operator_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_operator_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 operator_child_offsets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_operator_child_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_operator_child_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_wasm.proto.LogicalOperatorType operator_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_operator_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_operator_types(static_cast<::duckdb_wasm::proto::LogicalOperatorType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryPlan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_wasm.proto.QueryPlan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 operator_children = 1;
  {
    int byte_size = _operator_children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_operator_children(), byte_size, target);
    }
  }

  // repeated uint64 operator_child_offsets = 2;
  {
    int byte_size = _operator_child_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_operator_child_offsets(), byte_size, target);
    }
  }

  // repeated .duckdb_wasm.proto.LogicalOperatorType operator_types = 3;
  {
    int byte_size = _operator_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, operator_types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_wasm.proto.QueryPlan)
  return target;
}

size_t QueryPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_wasm.proto.QueryPlan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 operator_children = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->operator_children_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 operator_child_offsets = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->operator_child_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_child_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .duckdb_wasm.proto.LogicalOperatorType operator_types = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_operator_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_operator_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operator_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryPlan::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryPlan*>(
      &from));
}

void QueryPlan::MergeFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_wasm.proto.QueryPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operator_children_.MergeFrom(from.operator_children_);
  operator_child_offsets_.MergeFrom(from.operator_child_offsets_);
  operator_types_.MergeFrom(from.operator_types_);
}

void QueryPlan::CopyFrom(const QueryPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_wasm.proto.QueryPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlan::IsInitialized() const {
  return true;
}

void QueryPlan::InternalSwap(QueryPlan* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  operator_children_.InternalSwap(&other->operator_children_);
  operator_child_offsets_.InternalSwap(&other->operator_child_offsets_);
  operator_types_.InternalSwap(&other->operator_types_);
}

std::string QueryPlan::GetTypeName() const {
  return "duckdb_wasm.proto.QueryPlan";
}


// ===================================================================

class QueryResultColumn::_Internal {
 public:
};

QueryResultColumn::QueryResultColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  null_mask_(arena),
  rows_bool_(arena),
  rows_i32_(arena),
  rows_u32_(arena),
  rows_i64_(arena),
  rows_u64_(arena),
  rows_f32_(arena),
  rows_f64_(arena),
  rows_str_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_wasm.proto.QueryResultColumn)
}
QueryResultColumn::QueryResultColumn(const QueryResultColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      null_mask_(from.null_mask_),
      rows_bool_(from.rows_bool_),
      rows_i32_(from.rows_i32_),
      rows_u32_(from.rows_u32_),
      rows_i64_(from.rows_i64_),
      rows_u64_(from.rows_u64_),
      rows_f32_(from.rows_f32_),
      rows_f64_(from.rows_f64_),
      rows_str_(from.rows_str_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:duckdb_wasm.proto.QueryResultColumn)
}

void QueryResultColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResultColumn_data_2eproto.base);
}

QueryResultColumn::~QueryResultColumn() {
  // @@protoc_insertion_point(destructor:duckdb_wasm.proto.QueryResultColumn)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResultColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResultColumn::ArenaDtor(void* object) {
  QueryResultColumn* _this = reinterpret_cast< QueryResultColumn* >(object);
  (void)_this;
}
void QueryResultColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResultColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResultColumn& QueryResultColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResultColumn_data_2eproto.base);
  return *internal_default_instance();
}


void QueryResultColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_wasm.proto.QueryResultColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  null_mask_.Clear();
  rows_bool_.Clear();
  rows_i32_.Clear();
  rows_u32_.Clear();
  rows_i64_.Clear();
  rows_u64_.Clear();
  rows_f32_.Clear();
  rows_f64_.Clear();
  rows_str_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResultColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool null_mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_null_mask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_null_mask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rows_bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rows_bool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_rows_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rows_i32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rows_i32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_rows_i32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rows_u32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rows_u32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_rows_u32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 rows_i64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_rows_i64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_rows_i64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 rows_u64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_rows_u64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_rows_u64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rows_f32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rows_f32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_rows_f32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double rows_f64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rows_f64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65) {
          _internal_add_rows_f64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string rows_str = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rows_str();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResultColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_wasm.proto.QueryResultColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool null_mask = 1;
  if (this->_internal_null_mask_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_null_mask(), target);
  }

  // repeated int32 rows_bool = 2;
  {
    int byte_size = _rows_bool_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_rows_bool(), byte_size, target);
    }
  }

  // repeated int32 rows_i32 = 3;
  {
    int byte_size = _rows_i32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rows_i32(), byte_size, target);
    }
  }

  // repeated uint32 rows_u32 = 4;
  {
    int byte_size = _rows_u32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_rows_u32(), byte_size, target);
    }
  }

  // repeated int64 rows_i64 = 5;
  {
    int byte_size = _rows_i64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_rows_i64(), byte_size, target);
    }
  }

  // repeated uint64 rows_u64 = 6;
  {
    int byte_size = _rows_u64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_rows_u64(), byte_size, target);
    }
  }

  // repeated float rows_f32 = 7;
  if (this->_internal_rows_f32_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_rows_f32(), target);
  }

  // repeated double rows_f64 = 8;
  if (this->_internal_rows_f64_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_rows_f64(), target);
  }

  // repeated string rows_str = 9;
  for (int i = 0, n = this->_internal_rows_str_size(); i < n; i++) {
    const auto& s = this->_internal_rows_str(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_wasm.proto.QueryResultColumn.rows_str");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_wasm.proto.QueryResultColumn)
  return target;
}

size_t QueryResultColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_wasm.proto.QueryResultColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool null_mask = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_null_mask_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _null_mask_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rows_bool = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rows_bool_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_bool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 rows_i32 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rows_i32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_i32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rows_u32 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rows_u32_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_u32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 rows_i64 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->rows_i64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_i64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 rows_u64 = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->rows_u64_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_u64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rows_f32 = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_f32_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_f32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double rows_f64 = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rows_f64_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rows_f64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string rows_str = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rows_str_.size());
  for (int i = 0, n = rows_str_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rows_str_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResultColumn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResultColumn*>(
      &from));
}

void QueryResultColumn::MergeFrom(const QueryResultColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_wasm.proto.QueryResultColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  null_mask_.MergeFrom(from.null_mask_);
  rows_bool_.MergeFrom(from.rows_bool_);
  rows_i32_.MergeFrom(from.rows_i32_);
  rows_u32_.MergeFrom(from.rows_u32_);
  rows_i64_.MergeFrom(from.rows_i64_);
  rows_u64_.MergeFrom(from.rows_u64_);
  rows_f32_.MergeFrom(from.rows_f32_);
  rows_f64_.MergeFrom(from.rows_f64_);
  rows_str_.MergeFrom(from.rows_str_);
}

void QueryResultColumn::CopyFrom(const QueryResultColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_wasm.proto.QueryResultColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResultColumn::IsInitialized() const {
  return true;
}

void QueryResultColumn::InternalSwap(QueryResultColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  null_mask_.InternalSwap(&other->null_mask_);
  rows_bool_.InternalSwap(&other->rows_bool_);
  rows_i32_.InternalSwap(&other->rows_i32_);
  rows_u32_.InternalSwap(&other->rows_u32_);
  rows_i64_.InternalSwap(&other->rows_i64_);
  rows_u64_.InternalSwap(&other->rows_u64_);
  rows_f32_.InternalSwap(&other->rows_f32_);
  rows_f64_.InternalSwap(&other->rows_f64_);
  rows_str_.InternalSwap(&other->rows_str_);
}

std::string QueryResultColumn::GetTypeName() const {
  return "duckdb_wasm.proto.QueryResultColumn";
}


// ===================================================================

class QueryResultChunk::_Internal {
 public:
};

QueryResultChunk::QueryResultChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_wasm.proto.QueryResultChunk)
}
QueryResultChunk::QueryResultChunk(const QueryResultChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&row_offset_, &from.row_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:duckdb_wasm.proto.QueryResultChunk)
}

void QueryResultChunk::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResultChunk_data_2eproto.base);
  ::memset(&row_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
}

QueryResultChunk::~QueryResultChunk() {
  // @@protoc_insertion_point(destructor:duckdb_wasm.proto.QueryResultChunk)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResultChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryResultChunk::ArenaDtor(void* object) {
  QueryResultChunk* _this = reinterpret_cast< QueryResultChunk* >(object);
  (void)_this;
}
void QueryResultChunk::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResultChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResultChunk& QueryResultChunk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResultChunk_data_2eproto.base);
  return *internal_default_instance();
}


void QueryResultChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_wasm.proto.QueryResultChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  ::memset(&row_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&row_offset_)) + sizeof(row_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResultChunk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 row_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_wasm.proto.QueryResultColumn columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResultChunk::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_wasm.proto.QueryResultChunk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 row_offset = 1;
  if (this->row_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_offset(), target);
  }

  // uint32 row_count = 2;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row_count(), target);
  }

  // repeated .duckdb_wasm.proto.QueryResultColumn columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_wasm.proto.QueryResultChunk)
  return target;
}

size_t QueryResultChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_wasm.proto.QueryResultChunk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .duckdb_wasm.proto.QueryResultColumn columns = 3;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 row_offset = 1;
  if (this->row_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_offset());
  }

  // uint32 row_count = 2;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResultChunk::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResultChunk*>(
      &from));
}

void QueryResultChunk::MergeFrom(const QueryResultChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_wasm.proto.QueryResultChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.row_offset() != 0) {
    _internal_set_row_offset(from._internal_row_offset());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
}

void QueryResultChunk::CopyFrom(const QueryResultChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_wasm.proto.QueryResultChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResultChunk::IsInitialized() const {
  return true;
}

void QueryResultChunk::InternalSwap(QueryResultChunk* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResultChunk, row_count_)
      + sizeof(QueryResultChunk::row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryResultChunk, row_offset_)>(
          reinterpret_cast<char*>(&row_offset_),
          reinterpret_cast<char*>(&other->row_offset_));
}

std::string QueryResultChunk::GetTypeName() const {
  return "duckdb_wasm.proto.QueryResultChunk";
}


// ===================================================================

class QueryResult::_Internal {
 public:
  static const ::duckdb_wasm::proto::QueryPlan& query_plan(const QueryResult* msg);
};

const ::duckdb_wasm::proto::QueryPlan&
QueryResult::_Internal::query_plan(const QueryResult* msg) {
  return *msg->query_plan_;
}
QueryResult::QueryResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena),
  column_names_(arena),
  column_sql_types_(arena),
  data_chunks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:duckdb_wasm.proto.QueryResult)
}
QueryResult::QueryResult(const QueryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      column_names_(from.column_names_),
      column_sql_types_(from.column_sql_types_),
      data_chunks_(from.data_chunks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_query_plan()) {
    query_plan_ = new ::duckdb_wasm::proto::QueryPlan(*from.query_plan_);
  } else {
    query_plan_ = nullptr;
  }
  ::memcpy(&query_id_, &from.query_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_count_) -
    reinterpret_cast<char*>(&query_id_)) + sizeof(row_count_));
  // @@protoc_insertion_point(copy_constructor:duckdb_wasm.proto.QueryResult)
}

void QueryResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryResult_data_2eproto.base);
  ::memset(&query_plan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&query_plan_)) + sizeof(row_count_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:duckdb_wasm.proto.QueryResult)
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

void QueryResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete query_plan_;
}

void QueryResult::ArenaDtor(void* object) {
  QueryResult* _this = reinterpret_cast< QueryResult* >(object);
  (void)_this;
}
void QueryResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryResult& QueryResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryResult_data_2eproto.base);
  return *internal_default_instance();
}


void QueryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:duckdb_wasm.proto.QueryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_names_.Clear();
  column_sql_types_.Clear();
  data_chunks_.Clear();
  if (GetArena() == nullptr && query_plan_ != nullptr) {
    delete query_plan_;
  }
  query_plan_ = nullptr;
  ::memset(&query_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_count_) -
      reinterpret_cast<char*>(&query_id_)) + sizeof(row_count_));
  _internal_metadata_.Clear<std::string>();
}

const char* QueryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 query_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          query_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .duckdb_wasm.proto.QueryPlan query_plan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_plan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string column_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, nullptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_wasm.proto.SQLType column_sql_types = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_sql_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .duckdb_wasm.proto.QueryResultChunk data_chunks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<std::string>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:duckdb_wasm.proto.QueryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_query_id(), target);
  }

  // .duckdb_wasm.proto.QueryPlan query_plan = 2;
  if (this->has_query_plan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query_plan(this), target, stream);
  }

  // uint32 column_count = 3;
  if (this->column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column_count(), target);
  }

  // uint32 row_count = 4;
  if (this->row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_row_count(), target);
  }

  // repeated string column_names = 5;
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "duckdb_wasm.proto.QueryResult.column_names");
    target = stream->WriteString(5, s, target);
  }

  // repeated .duckdb_wasm.proto.SQLType column_sql_types = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_sql_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_column_sql_types(i), target, stream);
  }

  // repeated .duckdb_wasm.proto.QueryResultChunk data_chunks = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_chunks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_data_chunks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:duckdb_wasm.proto.QueryResult)
  return target;
}

size_t QueryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:duckdb_wasm.proto.QueryResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(column_names_.size());
  for (int i = 0, n = column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      column_names_.Get(i));
  }

  // repeated .duckdb_wasm.proto.SQLType column_sql_types = 7;
  total_size += 1UL * this->_internal_column_sql_types_size();
  for (const auto& msg : this->column_sql_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .duckdb_wasm.proto.QueryResultChunk data_chunks = 8;
  total_size += 1UL * this->_internal_data_chunks_size();
  for (const auto& msg : this->data_chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .duckdb_wasm.proto.QueryPlan query_plan = 2;
  if (this->has_query_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_plan_);
  }

  // uint32 query_id = 1;
  if (this->query_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_query_id());
  }

  // uint32 column_count = 3;
  if (this->column_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_count());
  }

  // uint32 row_count = 4;
  if (this->row_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QueryResult*>(
      &from));
}

void QueryResult::MergeFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:duckdb_wasm.proto.QueryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_names_.MergeFrom(from.column_names_);
  column_sql_types_.MergeFrom(from.column_sql_types_);
  data_chunks_.MergeFrom(from.data_chunks_);
  if (from.has_query_plan()) {
    _internal_mutable_query_plan()->::duckdb_wasm::proto::QueryPlan::MergeFrom(from._internal_query_plan());
  }
  if (from.query_id() != 0) {
    _internal_set_query_id(from._internal_query_id());
  }
  if (from.column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  if (from.row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
}

void QueryResult::CopyFrom(const QueryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:duckdb_wasm.proto.QueryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {
  return true;
}

void QueryResult::InternalSwap(QueryResult* other) {
  using std::swap;
  _internal_metadata_.Swap<std::string>(&other->_internal_metadata_);
  column_names_.InternalSwap(&other->column_names_);
  column_sql_types_.InternalSwap(&other->column_sql_types_);
  data_chunks_.InternalSwap(&other->data_chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryResult, row_count_)
      + sizeof(QueryResult::row_count_)
      - PROTOBUF_FIELD_OFFSET(QueryResult, query_plan_)>(
          reinterpret_cast<char*>(&query_plan_),
          reinterpret_cast<char*>(&other->query_plan_));
}

std::string QueryResult::GetTypeName() const {
  return "duckdb_wasm.proto.QueryResult";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace duckdb_wasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::duckdb_wasm::proto::SQLType* Arena::CreateMaybeMessage< ::duckdb_wasm::proto::SQLType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_wasm::proto::SQLType >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_wasm::proto::QueryPlan* Arena::CreateMaybeMessage< ::duckdb_wasm::proto::QueryPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_wasm::proto::QueryPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_wasm::proto::QueryResultColumn* Arena::CreateMaybeMessage< ::duckdb_wasm::proto::QueryResultColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_wasm::proto::QueryResultColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_wasm::proto::QueryResultChunk* Arena::CreateMaybeMessage< ::duckdb_wasm::proto::QueryResultChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_wasm::proto::QueryResultChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::duckdb_wasm::proto::QueryResult* Arena::CreateMaybeMessage< ::duckdb_wasm::proto::QueryResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::duckdb_wasm::proto::QueryResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
