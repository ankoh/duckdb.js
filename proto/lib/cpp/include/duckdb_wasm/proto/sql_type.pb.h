// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sql_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sql_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sql_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sql_5ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace duckdb_wasm {
namespace proto {
class SQLType;
class SQLTypeDefaultTypeInternal;
extern SQLTypeDefaultTypeInternal _SQLType_default_instance_;
}  // namespace proto
}  // namespace duckdb_wasm
PROTOBUF_NAMESPACE_OPEN
template<> ::duckdb_wasm::proto::SQLType* Arena::CreateMaybeMessage<::duckdb_wasm::proto::SQLType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace duckdb_wasm {
namespace proto {

enum SQLTypeID : int {
  SQL_INVALID = 0,
  SQL_NULL = 1,
  SQL_UNKNOWN = 2,
  SQL_ANY = 3,
  SQL_BOOLEAN = 10,
  SQL_TINYINT = 11,
  SQL_SMALLINT = 12,
  SQL_INTEGER = 13,
  SQL_BIGINT = 14,
  SQL_DATE = 15,
  SQL_TIME = 16,
  SQL_TIMESTAMP = 17,
  SQL_FLOAT = 18,
  SQL_DOUBLE = 19,
  SQL_DECIMAL = 20,
  SQL_CHAR = 21,
  SQL_VARCHAR = 22,
  SQL_VARBINARY = 23,
  SQL_BLOB = 24,
  SQL_STRUCT = 100,
  SQL_LIST = 101,
  SQLTypeID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SQLTypeID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SQLTypeID_IsValid(int value);
constexpr SQLTypeID SQLTypeID_MIN = SQL_INVALID;
constexpr SQLTypeID SQLTypeID_MAX = SQL_LIST;
constexpr int SQLTypeID_ARRAYSIZE = SQLTypeID_MAX + 1;

const std::string& SQLTypeID_Name(SQLTypeID value);
template<typename T>
inline const std::string& SQLTypeID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SQLTypeID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SQLTypeID_Name.");
  return SQLTypeID_Name(static_cast<SQLTypeID>(enum_t_value));
}
bool SQLTypeID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SQLTypeID* value);
// ===================================================================

class SQLType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.SQLType) */ {
 public:
  inline SQLType() : SQLType(nullptr) {}
  virtual ~SQLType();

  SQLType(const SQLType& from);
  SQLType(SQLType&& from) noexcept
    : SQLType() {
    *this = ::std::move(from);
  }

  inline SQLType& operator=(const SQLType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQLType& operator=(SQLType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SQLType& default_instance();

  static inline const SQLType* internal_default_instance() {
    return reinterpret_cast<const SQLType*>(
               &_SQLType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SQLType& a, SQLType& b) {
    a.Swap(&b);
  }
  inline void Swap(SQLType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQLType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SQLType* New() const final {
    return CreateMaybeMessage<SQLType>(nullptr);
  }

  SQLType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SQLType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SQLType& from);
  void MergeFrom(const SQLType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SQLType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.SQLType";
  }
  protected:
  explicit SQLType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollationFieldNumber = 4,
    kTypeIdFieldNumber = 1,
    kWidthFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // string collation = 4;
  void clear_collation();
  const std::string& collation() const;
  void set_collation(const std::string& value);
  void set_collation(std::string&& value);
  void set_collation(const char* value);
  void set_collation(const char* value, size_t size);
  std::string* mutable_collation();
  std::string* release_collation();
  void set_allocated_collation(std::string* collation);
  private:
  const std::string& _internal_collation() const;
  void _internal_set_collation(const std::string& value);
  std::string* _internal_mutable_collation();
  public:

  // .duckdb_wasm.proto.SQLTypeID type_id = 1;
  void clear_type_id();
  ::duckdb_wasm::proto::SQLTypeID type_id() const;
  void set_type_id(::duckdb_wasm::proto::SQLTypeID value);
  private:
  ::duckdb_wasm::proto::SQLTypeID _internal_type_id() const;
  void _internal_set_type_id(::duckdb_wasm::proto::SQLTypeID value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 scale = 3;
  void clear_scale();
  ::PROTOBUF_NAMESPACE_ID::uint32 scale() const;
  void set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scale() const;
  void _internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.SQLType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collation_;
  int type_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sql_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SQLType

// .duckdb_wasm.proto.SQLTypeID type_id = 1;
inline void SQLType::clear_type_id() {
  type_id_ = 0;
}
inline ::duckdb_wasm::proto::SQLTypeID SQLType::_internal_type_id() const {
  return static_cast< ::duckdb_wasm::proto::SQLTypeID >(type_id_);
}
inline ::duckdb_wasm::proto::SQLTypeID SQLType::type_id() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.type_id)
  return _internal_type_id();
}
inline void SQLType::_internal_set_type_id(::duckdb_wasm::proto::SQLTypeID value) {
  
  type_id_ = value;
}
inline void SQLType::set_type_id(::duckdb_wasm::proto::SQLTypeID value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.type_id)
}

// uint32 width = 2;
inline void SQLType::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::width() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.width)
  return _internal_width();
}
inline void SQLType::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void SQLType::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.width)
}

// uint32 scale = 3;
inline void SQLType::clear_scale() {
  scale_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::_internal_scale() const {
  return scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SQLType::scale() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.scale)
  return _internal_scale();
}
inline void SQLType::_internal_set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  scale_ = value;
}
inline void SQLType::set_scale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.scale)
}

// string collation = 4;
inline void SQLType::clear_collation() {
  collation_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SQLType::collation() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.SQLType.collation)
  return _internal_collation();
}
inline void SQLType::set_collation(const std::string& value) {
  _internal_set_collation(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.SQLType.collation)
}
inline std::string* SQLType::mutable_collation() {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.SQLType.collation)
  return _internal_mutable_collation();
}
inline const std::string& SQLType::_internal_collation() const {
  return collation_.Get();
}
inline void SQLType::_internal_set_collation(const std::string& value) {
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SQLType::set_collation(std::string&& value) {
  
  collation_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:duckdb_wasm.proto.SQLType.collation)
}
inline void SQLType::set_collation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.SQLType.collation)
}
inline void SQLType::set_collation(const char* value,
    size_t size) {
  
  collation_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.SQLType.collation)
}
inline std::string* SQLType::_internal_mutable_collation() {
  
  return collation_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SQLType::release_collation() {
  // @@protoc_insertion_point(field_release:duckdb_wasm.proto.SQLType.collation)
  return collation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SQLType::set_allocated_collation(std::string* collation) {
  if (collation != nullptr) {
    
  } else {
    
  }
  collation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:duckdb_wasm.proto.SQLType.collation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace duckdb_wasm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::duckdb_wasm::proto::SQLTypeID> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sql_5ftype_2eproto
