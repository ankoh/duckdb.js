// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace duckdb_wasm {
namespace proto {
namespace api {
class FormattedText;
class FormattedTextDefaultTypeInternal;
extern FormattedTextDefaultTypeInternal _FormattedText_default_instance_;
class RawData;
class RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace api
}  // namespace proto
}  // namespace duckdb_wasm
PROTOBUF_NAMESPACE_OPEN
template<> ::duckdb_wasm::proto::api::FormattedText* Arena::CreateMaybeMessage<::duckdb_wasm::proto::api::FormattedText>(Arena*);
template<> ::duckdb_wasm::proto::api::RawData* Arena::CreateMaybeMessage<::duckdb_wasm::proto::api::RawData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace duckdb_wasm {
namespace proto {
namespace api {

enum StatusCode : int {
  SUCCESS = 0,
  ERROR = 1,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusCode_IsValid(int value);
constexpr StatusCode StatusCode_MIN = SUCCESS;
constexpr StatusCode StatusCode_MAX = ERROR;
constexpr int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const std::string& StatusCode_Name(StatusCode value);
template<typename T>
inline const std::string& StatusCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusCode_Name.");
  return StatusCode_Name(static_cast<StatusCode>(enum_t_value));
}
bool StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusCode* value);
// ===================================================================

class FormattedText PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.api.FormattedText) */ {
 public:
  inline FormattedText() : FormattedText(nullptr) {}
  virtual ~FormattedText();

  FormattedText(const FormattedText& from);
  FormattedText(FormattedText&& from) noexcept
    : FormattedText() {
    *this = ::std::move(from);
  }

  inline FormattedText& operator=(const FormattedText& from) {
    CopyFrom(from);
    return *this;
  }
  inline FormattedText& operator=(FormattedText&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FormattedText& default_instance();

  static inline const FormattedText* internal_default_instance() {
    return reinterpret_cast<const FormattedText*>(
               &_FormattedText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FormattedText& a, FormattedText& b) {
    a.Swap(&b);
  }
  inline void Swap(FormattedText* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FormattedText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FormattedText* New() const final {
    return CreateMaybeMessage<FormattedText>(nullptr);
  }

  FormattedText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FormattedText>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FormattedText& from);
  void MergeFrom(const FormattedText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FormattedText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.api.FormattedText";
  }
  protected:
  explicit FormattedText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.api.FormattedText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class RawData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:duckdb_wasm.proto.api.RawData) */ {
 public:
  inline RawData() : RawData(nullptr) {}
  virtual ~RawData();

  RawData(const RawData& from);
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawData& operator=(RawData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RawData& default_instance();

  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }
  inline void Swap(RawData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawData* New() const final {
    return CreateMaybeMessage<RawData>(nullptr);
  }

  RawData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RawData& from);
  void MergeFrom(const RawData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RawData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "duckdb_wasm.proto.api.RawData";
  }
  protected:
  explicit RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:duckdb_wasm.proto.api.RawData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormattedText

// string text = 1;
inline void FormattedText::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FormattedText::text() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.api.FormattedText.text)
  return _internal_text();
}
inline void FormattedText::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.api.FormattedText.text)
}
inline std::string* FormattedText::mutable_text() {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.api.FormattedText.text)
  return _internal_mutable_text();
}
inline const std::string& FormattedText::_internal_text() const {
  return text_.Get();
}
inline void FormattedText::_internal_set_text(const std::string& value) {
  
  text_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FormattedText::set_text(std::string&& value) {
  
  text_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:duckdb_wasm.proto.api.FormattedText.text)
}
inline void FormattedText::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.api.FormattedText.text)
}
inline void FormattedText::set_text(const char* value,
    size_t size) {
  
  text_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.api.FormattedText.text)
}
inline std::string* FormattedText::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FormattedText::release_text() {
  // @@protoc_insertion_point(field_release:duckdb_wasm.proto.api.FormattedText.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FormattedText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:duckdb_wasm.proto.api.FormattedText.text)
}

// -------------------------------------------------------------------

// RawData

// bytes data = 1;
inline void RawData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RawData::data() const {
  // @@protoc_insertion_point(field_get:duckdb_wasm.proto.api.RawData.data)
  return _internal_data();
}
inline void RawData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:duckdb_wasm.proto.api.RawData.data)
}
inline std::string* RawData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:duckdb_wasm.proto.api.RawData.data)
  return _internal_mutable_data();
}
inline const std::string& RawData::_internal_data() const {
  return data_.Get();
}
inline void RawData::_internal_set_data(const std::string& value) {
  
  data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RawData::set_data(std::string&& value) {
  
  data_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:duckdb_wasm.proto.api.RawData.data)
}
inline void RawData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:duckdb_wasm.proto.api.RawData.data)
}
inline void RawData::set_data(const void* value,
    size_t size) {
  
  data_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:duckdb_wasm.proto.api.RawData.data)
}
inline std::string* RawData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RawData::release_data() {
  // @@protoc_insertion_point(field_release:duckdb_wasm.proto.api.RawData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RawData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:duckdb_wasm.proto.api.RawData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace proto
}  // namespace duckdb_wasm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::duckdb_wasm::proto::api::StatusCode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
