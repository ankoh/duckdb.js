// source: query_plan.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.duckdb_webapi.proto.LogicalOperatorType', null, global);
goog.exportSymbol('proto.duckdb_webapi.proto.QueryPlan', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_webapi.proto.QueryPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.duckdb_webapi.proto.QueryPlan.repeatedFields_, null);
};
goog.inherits(proto.duckdb_webapi.proto.QueryPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_webapi.proto.QueryPlan.displayName = 'proto.duckdb_webapi.proto.QueryPlan';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.duckdb_webapi.proto.QueryPlan.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_webapi.proto.QueryPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_webapi.proto.QueryPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_webapi.proto.QueryPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorChildrenList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    operatorChildOffsetsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    operatorTypesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_webapi.proto.QueryPlan}
 */
proto.duckdb_webapi.proto.QueryPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_webapi.proto.QueryPlan;
  return proto.duckdb_webapi.proto.QueryPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_webapi.proto.QueryPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_webapi.proto.QueryPlan}
 */
proto.duckdb_webapi.proto.QueryPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOperatorChildrenList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOperatorChildOffsetsList(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.duckdb_webapi.proto.LogicalOperatorType>} */ (reader.readPackedEnum());
      msg.setOperatorTypesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_webapi.proto.QueryPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_webapi.proto.QueryPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_webapi.proto.QueryPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperatorChildrenList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getOperatorChildOffsetsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
  f = message.getOperatorTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * repeated uint64 operator_children = 1;
 * @return {!Array<number>}
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.getOperatorChildrenList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.setOperatorChildrenList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.addOperatorChildren = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.clearOperatorChildrenList = function() {
  return this.setOperatorChildrenList([]);
};


/**
 * repeated uint64 operator_child_offsets = 2;
 * @return {!Array<number>}
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.getOperatorChildOffsetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.setOperatorChildOffsetsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.addOperatorChildOffsets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.clearOperatorChildOffsetsList = function() {
  return this.setOperatorChildOffsetsList([]);
};


/**
 * repeated LogicalOperatorType operator_types = 3;
 * @return {!Array<!proto.duckdb_webapi.proto.LogicalOperatorType>}
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.getOperatorTypesList = function() {
  return /** @type {!Array<!proto.duckdb_webapi.proto.LogicalOperatorType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.duckdb_webapi.proto.LogicalOperatorType>} value
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.setOperatorTypesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.duckdb_webapi.proto.LogicalOperatorType} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.addOperatorTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_webapi.proto.QueryPlan} returns this
 */
proto.duckdb_webapi.proto.QueryPlan.prototype.clearOperatorTypesList = function() {
  return this.setOperatorTypesList([]);
};


/**
 * @enum {number}
 */
proto.duckdb_webapi.proto.LogicalOperatorType = {
  OP_INVALID: 0,
  OP_PROJECTION: 1,
  OP_FILTER: 2,
  OP_AGGREGATE_AND_GROUP_BY: 3,
  OP_WINDOW: 4,
  OP_UNNEST: 5,
  OP_LIMIT: 6,
  OP_ORDER_BY: 7,
  OP_TOP_N: 8,
  OP_COPY_FROM_FILE: 9,
  OP_COPY_TO_FILE: 10,
  OP_DISTINCT: 11,
  OP_INDEX_SCAN: 12,
  OP_GET: 13,
  OP_CHUNK_GET: 14,
  OP_DELIM_GET: 15,
  OP_EXPRESSION_GET: 16,
  OP_TABLE_FUNCTION: 17,
  OP_EMPTY_RESULT: 18,
  OP_CTE_REF: 19,
  OP_JOIN: 20,
  OP_DELIM_JOIN: 21,
  OP_COMPARISON_JOIN: 22,
  OP_ANY_JOIN: 23,
  OP_CROSS_PRODUCT: 24,
  OP_UNION: 25,
  OP_EXCEPT: 26,
  OP_INTERSECT: 27,
  OP_RECURSIVE_CTE: 28,
  OP_INSERT: 29,
  OP_DELETE: 30,
  OP_UPDATE: 31,
  OP_ALTER: 32,
  OP_CREATE_TABLE: 33,
  OP_CREATE_INDEX: 34,
  OP_CREATE_SEQUENCE: 35,
  OP_CREATE_VIEW: 36,
  OP_CREATE_SCHEMA: 37,
  OP_DROP: 38,
  OP_PRAGMA: 39,
  OP_TRANSACTION: 40,
  OP_EXPLAIN: 41,
  OP_PREPARE: 42,
  OP_EXECUTE: 43,
  OP_VACUUM: 44
};

goog.object.extend(exports, proto.duckdb_webapi.proto);
