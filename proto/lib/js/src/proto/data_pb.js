// source: data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.duckdb_wasm.proto.LogicalOperatorType', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.QueryPlan', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.QueryResult', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.QueryResultChunk', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.QueryResultColumn', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.SQLType', null, global);
goog.exportSymbol('proto.duckdb_wasm.proto.SQLTypeID', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_wasm.proto.SQLType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.duckdb_wasm.proto.SQLType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_wasm.proto.SQLType.displayName = 'proto.duckdb_wasm.proto.SQLType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_wasm.proto.QueryPlan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.duckdb_wasm.proto.QueryPlan.repeatedFields_, null);
};
goog.inherits(proto.duckdb_wasm.proto.QueryPlan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_wasm.proto.QueryPlan.displayName = 'proto.duckdb_wasm.proto.QueryPlan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_wasm.proto.QueryResultColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.duckdb_wasm.proto.QueryResultColumn.repeatedFields_, null);
};
goog.inherits(proto.duckdb_wasm.proto.QueryResultColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_wasm.proto.QueryResultColumn.displayName = 'proto.duckdb_wasm.proto.QueryResultColumn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_wasm.proto.QueryResultChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.duckdb_wasm.proto.QueryResultChunk.repeatedFields_, null);
};
goog.inherits(proto.duckdb_wasm.proto.QueryResultChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_wasm.proto.QueryResultChunk.displayName = 'proto.duckdb_wasm.proto.QueryResultChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.duckdb_wasm.proto.QueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.duckdb_wasm.proto.QueryResult.repeatedFields_, null);
};
goog.inherits(proto.duckdb_wasm.proto.QueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.duckdb_wasm.proto.QueryResult.displayName = 'proto.duckdb_wasm.proto.QueryResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_wasm.proto.SQLType.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_wasm.proto.SQLType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_wasm.proto.SQLType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.SQLType.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scale: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collation: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_wasm.proto.SQLType}
 */
proto.duckdb_wasm.proto.SQLType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_wasm.proto.SQLType;
  return proto.duckdb_wasm.proto.SQLType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_wasm.proto.SQLType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_wasm.proto.SQLType}
 */
proto.duckdb_wasm.proto.SQLType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.duckdb_wasm.proto.SQLTypeID} */ (reader.readEnum());
      msg.setTypeId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScale(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_wasm.proto.SQLType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_wasm.proto.SQLType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_wasm.proto.SQLType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.SQLType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeId();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getScale();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCollation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SQLTypeID type_id = 1;
 * @return {!proto.duckdb_wasm.proto.SQLTypeID}
 */
proto.duckdb_wasm.proto.SQLType.prototype.getTypeId = function() {
  return /** @type {!proto.duckdb_wasm.proto.SQLTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.duckdb_wasm.proto.SQLTypeID} value
 * @return {!proto.duckdb_wasm.proto.SQLType} returns this
 */
proto.duckdb_wasm.proto.SQLType.prototype.setTypeId = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.duckdb_wasm.proto.SQLType.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.SQLType} returns this
 */
proto.duckdb_wasm.proto.SQLType.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 scale = 3;
 * @return {number}
 */
proto.duckdb_wasm.proto.SQLType.prototype.getScale = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.SQLType} returns this
 */
proto.duckdb_wasm.proto.SQLType.prototype.setScale = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string collation = 4;
 * @return {string}
 */
proto.duckdb_wasm.proto.SQLType.prototype.getCollation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.duckdb_wasm.proto.SQLType} returns this
 */
proto.duckdb_wasm.proto.SQLType.prototype.setCollation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.duckdb_wasm.proto.QueryPlan.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_wasm.proto.QueryPlan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_wasm.proto.QueryPlan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryPlan.toObject = function(includeInstance, msg) {
  var f, obj = {
    operatorChildrenList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    operatorChildOffsetsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    operatorTypesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_wasm.proto.QueryPlan}
 */
proto.duckdb_wasm.proto.QueryPlan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_wasm.proto.QueryPlan;
  return proto.duckdb_wasm.proto.QueryPlan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_wasm.proto.QueryPlan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_wasm.proto.QueryPlan}
 */
proto.duckdb_wasm.proto.QueryPlan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOperatorChildrenList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOperatorChildOffsetsList(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.duckdb_wasm.proto.LogicalOperatorType>} */ (reader.readPackedEnum());
      msg.setOperatorTypesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_wasm.proto.QueryPlan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_wasm.proto.QueryPlan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryPlan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperatorChildrenList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
  f = message.getOperatorChildOffsetsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
  f = message.getOperatorTypesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
};


/**
 * repeated uint64 operator_children = 1;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.getOperatorChildrenList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.setOperatorChildrenList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.addOperatorChildren = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.clearOperatorChildrenList = function() {
  return this.setOperatorChildrenList([]);
};


/**
 * repeated uint64 operator_child_offsets = 2;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.getOperatorChildOffsetsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.setOperatorChildOffsetsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.addOperatorChildOffsets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.clearOperatorChildOffsetsList = function() {
  return this.setOperatorChildOffsetsList([]);
};


/**
 * repeated LogicalOperatorType operator_types = 3;
 * @return {!Array<!proto.duckdb_wasm.proto.LogicalOperatorType>}
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.getOperatorTypesList = function() {
  return /** @type {!Array<!proto.duckdb_wasm.proto.LogicalOperatorType>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.duckdb_wasm.proto.LogicalOperatorType>} value
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.setOperatorTypesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.duckdb_wasm.proto.LogicalOperatorType} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.addOperatorTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryPlan} returns this
 */
proto.duckdb_wasm.proto.QueryPlan.prototype.clearOperatorTypesList = function() {
  return this.setOperatorTypesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.duckdb_wasm.proto.QueryResultColumn.repeatedFields_ = [1,2,3,4,5,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_wasm.proto.QueryResultColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_wasm.proto.QueryResultColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResultColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    nullMaskList: (f = jspb.Message.getRepeatedBooleanField(msg, 1)) == null ? undefined : f,
    rowsBoolList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rowsI32List: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    rowsU32List: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    rowsI64List: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    rowsU64List: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    rowsF32List: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    rowsF64List: (f = jspb.Message.getRepeatedFloatingPointField(msg, 8)) == null ? undefined : f,
    rowsStrList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn}
 */
proto.duckdb_wasm.proto.QueryResultColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_wasm.proto.QueryResultColumn;
  return proto.duckdb_wasm.proto.QueryResultColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_wasm.proto.QueryResultColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn}
 */
proto.duckdb_wasm.proto.QueryResultColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setNullMaskList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setRowsBoolList(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setRowsI32List(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setRowsU32List(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setRowsI64List(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setRowsU64List(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setRowsF32List(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setRowsF64List(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addRowsStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_wasm.proto.QueryResultColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_wasm.proto.QueryResultColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResultColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNullMaskList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
  f = message.getRowsBoolList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getRowsI32List();
  if (f.length > 0) {
    writer.writePackedInt32(
      3,
      f
    );
  }
  f = message.getRowsU32List();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getRowsI64List();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getRowsU64List();
  if (f.length > 0) {
    writer.writePackedUint64(
      6,
      f
    );
  }
  f = message.getRowsF32List();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = message.getRowsF64List();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getRowsStrList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * repeated bool null_mask = 1;
 * @return {!Array<boolean>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getNullMaskList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedBooleanField(this, 1));
};


/**
 * @param {!Array<boolean>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setNullMaskList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addNullMask = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearNullMaskList = function() {
  return this.setNullMaskList([]);
};


/**
 * repeated int32 rows_bool = 2;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsBoolList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsBoolList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsBool = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsBoolList = function() {
  return this.setRowsBoolList([]);
};


/**
 * repeated int32 rows_i32 = 3;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsI32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsI32List = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsI32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsI32List = function() {
  return this.setRowsI32List([]);
};


/**
 * repeated uint32 rows_u32 = 4;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsU32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsU32List = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsU32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsU32List = function() {
  return this.setRowsU32List([]);
};


/**
 * repeated int64 rows_i64 = 5;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsI64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsI64List = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsI64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsI64List = function() {
  return this.setRowsI64List([]);
};


/**
 * repeated uint64 rows_u64 = 6;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsU64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsU64List = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsU64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsU64List = function() {
  return this.setRowsU64List([]);
};


/**
 * repeated float rows_f32 = 7;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsF32List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsF32List = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsF32 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsF32List = function() {
  return this.setRowsF32List([]);
};


/**
 * repeated double rows_f64 = 8;
 * @return {!Array<number>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsF64List = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsF64List = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsF64 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsF64List = function() {
  return this.setRowsF64List([]);
};


/**
 * repeated string rows_str = 9;
 * @return {!Array<string>}
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.getRowsStrList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.setRowsStrList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.addRowsStr = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn} returns this
 */
proto.duckdb_wasm.proto.QueryResultColumn.prototype.clearRowsStrList = function() {
  return this.setRowsStrList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.duckdb_wasm.proto.QueryResultChunk.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_wasm.proto.QueryResultChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_wasm.proto.QueryResultChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResultChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowOffset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rowCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.duckdb_wasm.proto.QueryResultColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk}
 */
proto.duckdb_wasm.proto.QueryResultChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_wasm.proto.QueryResultChunk;
  return proto.duckdb_wasm.proto.QueryResultChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_wasm.proto.QueryResultChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk}
 */
proto.duckdb_wasm.proto.QueryResultChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowCount(value);
      break;
    case 3:
      var value = new proto.duckdb_wasm.proto.QueryResultColumn;
      reader.readMessage(value,proto.duckdb_wasm.proto.QueryResultColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_wasm.proto.QueryResultChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_wasm.proto.QueryResultChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResultChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowOffset();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRowCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.duckdb_wasm.proto.QueryResultColumn.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 row_offset = 1;
 * @return {number}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.getRowOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk} returns this
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.setRowOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 row_count = 2;
 * @return {number}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.getRowCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk} returns this
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.setRowCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated QueryResultColumn columns = 3;
 * @return {!Array<!proto.duckdb_wasm.proto.QueryResultColumn>}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.duckdb_wasm.proto.QueryResultColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.duckdb_wasm.proto.QueryResultColumn, 3));
};


/**
 * @param {!Array<!proto.duckdb_wasm.proto.QueryResultColumn>} value
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk} returns this
*/
proto.duckdb_wasm.proto.QueryResultChunk.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.duckdb_wasm.proto.QueryResultColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultColumn}
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.duckdb_wasm.proto.QueryResultColumn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk} returns this
 */
proto.duckdb_wasm.proto.QueryResultChunk.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.duckdb_wasm.proto.QueryResult.repeatedFields_ = [5,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.duckdb_wasm.proto.QueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.duckdb_wasm.proto.QueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    queryPlan: (f = msg.getQueryPlan()) && proto.duckdb_wasm.proto.QueryPlan.toObject(includeInstance, f),
    columnCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rowCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    columnNamesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    columnSqlTypesList: jspb.Message.toObjectList(msg.getColumnSqlTypesList(),
    proto.duckdb_wasm.proto.SQLType.toObject, includeInstance),
    dataChunksList: jspb.Message.toObjectList(msg.getDataChunksList(),
    proto.duckdb_wasm.proto.QueryResultChunk.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.duckdb_wasm.proto.QueryResult}
 */
proto.duckdb_wasm.proto.QueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.duckdb_wasm.proto.QueryResult;
  return proto.duckdb_wasm.proto.QueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.duckdb_wasm.proto.QueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.duckdb_wasm.proto.QueryResult}
 */
proto.duckdb_wasm.proto.QueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQueryId(value);
      break;
    case 2:
      var value = new proto.duckdb_wasm.proto.QueryPlan;
      reader.readMessage(value,proto.duckdb_wasm.proto.QueryPlan.deserializeBinaryFromReader);
      msg.setQueryPlan(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumnCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowCount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addColumnNames(value);
      break;
    case 7:
      var value = new proto.duckdb_wasm.proto.SQLType;
      reader.readMessage(value,proto.duckdb_wasm.proto.SQLType.deserializeBinaryFromReader);
      msg.addColumnSqlTypes(value);
      break;
    case 8:
      var value = new proto.duckdb_wasm.proto.QueryResultChunk;
      reader.readMessage(value,proto.duckdb_wasm.proto.QueryResultChunk.deserializeBinaryFromReader);
      msg.addDataChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.duckdb_wasm.proto.QueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.duckdb_wasm.proto.QueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.duckdb_wasm.proto.QueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQueryPlan();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.duckdb_wasm.proto.QueryPlan.serializeBinaryToWriter
    );
  }
  f = message.getColumnCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getRowCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getColumnNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getColumnSqlTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.duckdb_wasm.proto.SQLType.serializeBinaryToWriter
    );
  }
  f = message.getDataChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.duckdb_wasm.proto.QueryResultChunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 query_id = 1;
 * @return {number}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getQueryId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.setQueryId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional QueryPlan query_plan = 2;
 * @return {?proto.duckdb_wasm.proto.QueryPlan}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getQueryPlan = function() {
  return /** @type{?proto.duckdb_wasm.proto.QueryPlan} */ (
    jspb.Message.getWrapperField(this, proto.duckdb_wasm.proto.QueryPlan, 2));
};


/**
 * @param {?proto.duckdb_wasm.proto.QueryPlan|undefined} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
*/
proto.duckdb_wasm.proto.QueryResult.prototype.setQueryPlan = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.clearQueryPlan = function() {
  return this.setQueryPlan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.hasQueryPlan = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 column_count = 3;
 * @return {number}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getColumnCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.setColumnCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 row_count = 4;
 * @return {number}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getRowCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.setRowCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string column_names = 5;
 * @return {!Array<string>}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getColumnNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.setColumnNamesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.addColumnNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.clearColumnNamesList = function() {
  return this.setColumnNamesList([]);
};


/**
 * repeated SQLType column_sql_types = 7;
 * @return {!Array<!proto.duckdb_wasm.proto.SQLType>}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getColumnSqlTypesList = function() {
  return /** @type{!Array<!proto.duckdb_wasm.proto.SQLType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.duckdb_wasm.proto.SQLType, 7));
};


/**
 * @param {!Array<!proto.duckdb_wasm.proto.SQLType>} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
*/
proto.duckdb_wasm.proto.QueryResult.prototype.setColumnSqlTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.duckdb_wasm.proto.SQLType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.SQLType}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.addColumnSqlTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.duckdb_wasm.proto.SQLType, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.clearColumnSqlTypesList = function() {
  return this.setColumnSqlTypesList([]);
};


/**
 * repeated QueryResultChunk data_chunks = 8;
 * @return {!Array<!proto.duckdb_wasm.proto.QueryResultChunk>}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.getDataChunksList = function() {
  return /** @type{!Array<!proto.duckdb_wasm.proto.QueryResultChunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.duckdb_wasm.proto.QueryResultChunk, 8));
};


/**
 * @param {!Array<!proto.duckdb_wasm.proto.QueryResultChunk>} value
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
*/
proto.duckdb_wasm.proto.QueryResult.prototype.setDataChunksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.duckdb_wasm.proto.QueryResultChunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.duckdb_wasm.proto.QueryResultChunk}
 */
proto.duckdb_wasm.proto.QueryResult.prototype.addDataChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.duckdb_wasm.proto.QueryResultChunk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.duckdb_wasm.proto.QueryResult} returns this
 */
proto.duckdb_wasm.proto.QueryResult.prototype.clearDataChunksList = function() {
  return this.setDataChunksList([]);
};


/**
 * @enum {number}
 */
proto.duckdb_wasm.proto.SQLTypeID = {
  SQL_INVALID: 0,
  SQL_NULL: 1,
  SQL_UNKNOWN: 2,
  SQL_ANY: 3,
  SQL_BOOLEAN: 10,
  SQL_TINYINT: 11,
  SQL_SMALLINT: 12,
  SQL_INTEGER: 13,
  SQL_BIGINT: 14,
  SQL_DATE: 15,
  SQL_TIME: 16,
  SQL_TIMESTAMP: 17,
  SQL_FLOAT: 18,
  SQL_DOUBLE: 19,
  SQL_DECIMAL: 20,
  SQL_CHAR: 21,
  SQL_VARCHAR: 22,
  SQL_VARBINARY: 23,
  SQL_BLOB: 24,
  SQL_STRUCT: 100,
  SQL_LIST: 101
};

/**
 * @enum {number}
 */
proto.duckdb_wasm.proto.LogicalOperatorType = {
  OP_INVALID: 0,
  OP_PROJECTION: 1,
  OP_FILTER: 2,
  OP_AGGREGATE_AND_GROUP_BY: 3,
  OP_WINDOW: 4,
  OP_UNNEST: 5,
  OP_LIMIT: 6,
  OP_ORDER_BY: 7,
  OP_TOP_N: 8,
  OP_COPY_FROM_FILE: 9,
  OP_COPY_TO_FILE: 10,
  OP_DISTINCT: 11,
  OP_INDEX_SCAN: 12,
  OP_GET: 13,
  OP_CHUNK_GET: 14,
  OP_DELIM_GET: 15,
  OP_EXPRESSION_GET: 16,
  OP_TABLE_FUNCTION: 17,
  OP_EMPTY_RESULT: 18,
  OP_CTE_REF: 19,
  OP_JOIN: 20,
  OP_DELIM_JOIN: 21,
  OP_COMPARISON_JOIN: 22,
  OP_ANY_JOIN: 23,
  OP_CROSS_PRODUCT: 24,
  OP_UNION: 25,
  OP_EXCEPT: 26,
  OP_INTERSECT: 27,
  OP_RECURSIVE_CTE: 28,
  OP_INSERT: 29,
  OP_DELETE: 30,
  OP_UPDATE: 31,
  OP_ALTER: 32,
  OP_CREATE_TABLE: 33,
  OP_CREATE_INDEX: 34,
  OP_CREATE_SEQUENCE: 35,
  OP_CREATE_VIEW: 36,
  OP_CREATE_SCHEMA: 37,
  OP_DROP: 38,
  OP_PRAGMA: 39,
  OP_TRANSACTION: 40,
  OP_EXPLAIN: 41,
  OP_PREPARE: 42,
  OP_EXECUTE: 43,
  OP_VACUUM: 44
};

goog.object.extend(exports, proto.duckdb_wasm.proto);
