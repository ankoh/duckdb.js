syntax = "proto3";

option optimize_for = LITE_RUNTIME;
option cc_enable_arenas = true;

package duckdb_wasm.proto;

// The SQL data types
// duckdb: common/types.hpp
enum SQLTypeID {
    SQL_INVALID = 0;
    SQL_NULL = 1;
    SQL_UNKNOWN = 2;
    SQL_ANY = 3;
    SQL_BOOLEAN = 10;
    SQL_TINYINT = 11;
    SQL_SMALLINT = 12;
    SQL_INTEGER = 13;
    SQL_BIGINT = 14;
    SQL_DATE = 15;
    SQL_TIME = 16;
    SQL_TIMESTAMP = 17;
    SQL_FLOAT = 18;
    SQL_DOUBLE = 19;
    SQL_DECIMAL = 20;
    SQL_CHAR = 21;
    SQL_VARCHAR = 22;
    SQL_VARBINARY = 23;
    SQL_BLOB = 24;
    SQL_STRUCT = 100;
    SQL_LIST = 101;
}

// A SQL type
// duckdb: common/types.hpp
message SQLType {
    SQLTypeID type_id = 1;
    uint32 width = 2;
    uint32 scale = 3;
    string collation = 4;
}

// The logical operator types
// duckdb: common/enums/logical_operator_type.hpp
enum LogicalOperatorType {
    OP_INVALID = 0;
    OP_PROJECTION = 1;
    OP_FILTER = 2;
    OP_AGGREGATE_AND_GROUP_BY = 3;
    OP_WINDOW = 4;
    OP_UNNEST = 5;
    OP_LIMIT = 6;
    OP_ORDER_BY = 7;
    OP_TOP_N = 8;
    OP_COPY_FROM_FILE = 9;
    OP_COPY_TO_FILE = 10;
    OP_DISTINCT = 11;
    OP_INDEX_SCAN = 12;

    // Data sources
    OP_GET = 13;
    OP_CHUNK_GET = 14;
    OP_DELIM_GET = 15;
    OP_EXPRESSION_GET = 16;
    OP_TABLE_FUNCTION = 17;
    OP_EMPTY_RESULT = 18;
    OP_CTE_REF = 19;

    // Joins
    OP_JOIN = 20;
    OP_DELIM_JOIN = 21;
    OP_COMPARISON_JOIN = 22;
    OP_ANY_JOIN = 23;
    OP_CROSS_PRODUCT = 24;

    // SetOps
    OP_UNION = 25;
    OP_EXCEPT = 26;
    OP_INTERSECT = 27;
    OP_RECURSIVE_CTE = 28;

    // Updates
    OP_INSERT = 29;
    OP_DELETE = 30;
    OP_UPDATE = 31;

    // Schema
    OP_ALTER = 32;
    OP_CREATE_TABLE = 33;
    OP_CREATE_INDEX = 34;
    OP_CREATE_SEQUENCE = 35;
    OP_CREATE_VIEW = 36;
    OP_CREATE_SCHEMA = 37;
    OP_DROP = 38;
    OP_PRAGMA = 39;
    OP_TRANSACTION = 40;

    // Explain
    OP_EXPLAIN = 41;

    // Helpers
    OP_PREPARE = 42;
    OP_EXECUTE = 43;
    OP_VACUUM = 44;
}

// A query plan
message QueryPlan {
    repeated uint64 operator_children = 1;
    repeated uint64 operator_child_offsets = 2;
    repeated LogicalOperatorType operator_types = 3;
}

// A column of a query result
message QueryResultColumn {
    repeated bool null_mask = 1;

    repeated int32 rows_bool = 2;
    repeated int32 rows_i32 = 3;
    repeated uint32 rows_u32 = 4;
    repeated int64 rows_i64 = 5;
    repeated uint64 rows_u64 = 6;
    repeated float rows_f32 = 7;
    repeated double rows_f64 = 8;
    repeated string rows_str = 9;
}

// A data chunk
message QueryResultChunk {
    uint32 row_offset = 1;
    uint32 row_count = 2;
    repeated QueryResultColumn columns = 3;
}

// A query result
message QueryResult {
    uint32 query_id = 1;
    QueryPlan query_plan = 2;
    uint32 column_count = 3;
    uint32 row_count = 4;

    repeated string column_names = 5;
    repeated SQLType column_sql_types = 7;
    repeated QueryResultChunk data_chunks = 8;
}

